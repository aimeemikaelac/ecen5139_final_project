// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "runQueue.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic runQueue::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic runQueue::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> runQueue::ap_ST_st1_fsm_0 = "0000";
const sc_lv<4> runQueue::ap_ST_st2_fsm_1 = "1";
const sc_lv<4> runQueue::ap_ST_st3_fsm_2 = "10";
const sc_lv<4> runQueue::ap_ST_st4_fsm_3 = "11";
const sc_lv<4> runQueue::ap_ST_st5_fsm_4 = "100";
const sc_lv<4> runQueue::ap_ST_st6_fsm_5 = "101";
const sc_lv<4> runQueue::ap_ST_st7_fsm_6 = "110";
const sc_lv<4> runQueue::ap_ST_st8_fsm_7 = "111";
const sc_lv<4> runQueue::ap_ST_st9_fsm_8 = "1000";
const sc_lv<32> runQueue::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> runQueue::ap_const_lv1_0 = "0";
const sc_lv<32> runQueue::ap_const_lv32_1 = "1";
const sc_lv<2> runQueue::ap_const_lv2_0 = "00";
const sc_lv<2> runQueue::ap_const_lv2_1 = "1";
const sc_lv<2> runQueue::ap_const_lv2_2 = "10";
const sc_lv<4> runQueue::ap_const_lv4_0 = "0000";
const sc_lv<1> runQueue::ap_const_lv1_1 = "1";

runQueue::runQueue(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm );
    sensitive << ( result_reg2mem_1_reg_218 );

    SC_METHOD(thread_ap_sig_bdd_52);
    sensitive << ( ap_start );
    sensitive << ( iterations_ap_vld_in_sig );

    SC_METHOD(thread_ap_sig_bdd_70);
    sensitive << ( ap_CS_fsm );
    sensitive << ( localEmpty_load_reg_361 );

    SC_METHOD(thread_cmdOut_V);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_251_p2 );
    sensitive << ( tmp_reg_338 );
    sensitive << ( tmp6_fu_309_p2 );
    sensitive << ( cmdOut_V_preg );

    SC_METHOD(thread_currentIteration);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_251_p2 );
    sensitive << ( tmp_reg_338 );
    sensitive << ( j_1_reg2mem_reg_157 );
    sensitive << ( tmp6_fu_309_p2 );
    sensitive << ( currentIteration_preg );

    SC_METHOD(thread_finished);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_finished_ap_vld);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_fullOut);
    sensitive << ( ap_CS_fsm );
    sensitive << ( full );
    sensitive << ( fullOut_preg );

    SC_METHOD(thread_grp_load_fu_236_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( localFull_fu_80 );

    SC_METHOD(thread_grp_load_fu_244_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( localEmpty_load_reg_361 );
    sensitive << ( localEmpty_fu_84 );

    SC_METHOD(thread_grp_read_fu_114_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( full );
    sensitive << ( tmp_fu_251_p2 );
    sensitive << ( tmp_reg_338 );
    sensitive << ( tmp6_fu_309_p2 );

    SC_METHOD(thread_grp_read_fu_136_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( empty );
    sensitive << ( localEmpty_load_reg_361 );

    SC_METHOD(thread_i_fu_266_p2);
    sensitive << ( i_reg2mem_reg_181 );

    SC_METHOD(thread_i_s_fu_300_p2);
    sensitive << ( i_1_reg2mem_reg_205 );

    SC_METHOD(thread_iterations_ap_vld_in_sig);
    sensitive << ( iterations_ap_vld );
    sensitive << ( iterations_ap_vld_preg );

    SC_METHOD(thread_iterations_in_sig);
    sensitive << ( iterations );
    sensitive << ( iterations_preg );
    sensitive << ( iterations_ap_vld );

    SC_METHOD(thread_j_s_fu_314_p2);
    sensitive << ( j_1_reg2mem_reg_157 );

    SC_METHOD(thread_priorityOut_V);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_1_fu_261_p1 );
    sensitive << ( priorityOut_V_preg );

    SC_METHOD(thread_result_1_s_fu_291_p3);
    sensitive << ( result_reg2mem_0_fu_88 );
    sensitive << ( tmp_5_fu_279_p2 );
    sensitive << ( result_fu_285_p2 );

    SC_METHOD(thread_result_fu_285_p2);
    sensitive << ( result_reg2mem_0_fu_88 );

    SC_METHOD(thread_tmp6_fu_309_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( iterations_in_sig );
    sensitive << ( tmp_reg_338 );
    sensitive << ( j_1_reg2mem_reg_157 );

    SC_METHOD(thread_tmp_1_fu_261_p1);
    sensitive << ( val_assign_reg2mem_reg_170 );

    SC_METHOD(thread_tmp_4_fu_275_p1);
    sensitive << ( priorityIn_V );

    SC_METHOD(thread_tmp_5_fu_279_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( localEmpty_load_reg_361 );
    sensitive << ( op2_assign_reg2mem_reg_194 );
    sensitive << ( tmp_4_fu_275_p1 );

    SC_METHOD(thread_tmp_fu_251_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( iterations_in_sig );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_52 );
    sensitive << ( tmp_fu_251_p2 );
    sensitive << ( tmp_reg_338 );
    sensitive << ( grp_load_fu_244_p1 );
    sensitive << ( localEmpty_load_reg_361 );
    sensitive << ( tmp6_fu_309_p2 );
    sensitive << ( grp_load_fu_236_p1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000";
    iterations_preg = "00000000000000000000000000000000";
    iterations_ap_vld_preg = SC_LOGIC_0;
    cmdOut_V_preg = "00";
    currentIteration_preg = "00000000000000000000000000000000";
    priorityOut_V_preg = "0000";
    fullOut_preg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "runQueue_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, priorityOut_V, "(port)priorityOut_V");
    sc_trace(mVcdFile, priorityIn_V, "(port)priorityIn_V");
    sc_trace(mVcdFile, cmdOut_V, "(port)cmdOut_V");
    sc_trace(mVcdFile, empty, "(port)empty");
    sc_trace(mVcdFile, full, "(port)full");
    sc_trace(mVcdFile, fullOut, "(port)fullOut");
    sc_trace(mVcdFile, iterations, "(port)iterations");
    sc_trace(mVcdFile, iterations_ap_vld, "(port)iterations_ap_vld");
    sc_trace(mVcdFile, finished, "(port)finished");
    sc_trace(mVcdFile, finished_ap_vld, "(port)finished_ap_vld");
    sc_trace(mVcdFile, currentIteration, "(port)currentIteration");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, iterations_in_sig, "iterations_in_sig");
    sc_trace(mVcdFile, iterations_preg, "iterations_preg");
    sc_trace(mVcdFile, iterations_ap_vld_in_sig, "iterations_ap_vld_in_sig");
    sc_trace(mVcdFile, iterations_ap_vld_preg, "iterations_ap_vld_preg");
    sc_trace(mVcdFile, ap_sig_bdd_52, "ap_sig_bdd_52");
    sc_trace(mVcdFile, tmp_fu_251_p2, "tmp_fu_251_p2");
    sc_trace(mVcdFile, tmp_reg_338, "tmp_reg_338");
    sc_trace(mVcdFile, i_fu_266_p2, "i_fu_266_p2");
    sc_trace(mVcdFile, grp_load_fu_244_p1, "grp_load_fu_244_p1");
    sc_trace(mVcdFile, localEmpty_load_reg_361, "localEmpty_load_reg_361");
    sc_trace(mVcdFile, i_s_fu_300_p2, "i_s_fu_300_p2");
    sc_trace(mVcdFile, result_reg2mem_0_load_reg_373, "result_reg2mem_0_load_reg_373");
    sc_trace(mVcdFile, j_s_fu_314_p2, "j_s_fu_314_p2");
    sc_trace(mVcdFile, j_1_reg2mem_reg_157, "j_1_reg2mem_reg_157");
    sc_trace(mVcdFile, tmp6_fu_309_p2, "tmp6_fu_309_p2");
    sc_trace(mVcdFile, val_assign_reg2mem_reg_170, "val_assign_reg2mem_reg_170");
    sc_trace(mVcdFile, grp_load_fu_236_p1, "grp_load_fu_236_p1");
    sc_trace(mVcdFile, i_reg2mem_reg_181, "i_reg2mem_reg_181");
    sc_trace(mVcdFile, op2_assign_reg2mem_reg_194, "op2_assign_reg2mem_reg_194");
    sc_trace(mVcdFile, i_1_reg2mem_reg_205, "i_1_reg2mem_reg_205");
    sc_trace(mVcdFile, result_reg2mem_1_reg_218, "result_reg2mem_1_reg_218");
    sc_trace(mVcdFile, localFull_fu_80, "localFull_fu_80");
    sc_trace(mVcdFile, grp_read_fu_114_p2, "grp_read_fu_114_p2");
    sc_trace(mVcdFile, localEmpty_fu_84, "localEmpty_fu_84");
    sc_trace(mVcdFile, grp_read_fu_136_p2, "grp_read_fu_136_p2");
    sc_trace(mVcdFile, result_reg2mem_0_fu_88, "result_reg2mem_0_fu_88");
    sc_trace(mVcdFile, result_1_s_fu_291_p3, "result_1_s_fu_291_p3");
    sc_trace(mVcdFile, cmdOut_V_preg, "cmdOut_V_preg");
    sc_trace(mVcdFile, currentIteration_preg, "currentIteration_preg");
    sc_trace(mVcdFile, tmp_1_fu_261_p1, "tmp_1_fu_261_p1");
    sc_trace(mVcdFile, priorityOut_V_preg, "priorityOut_V_preg");
    sc_trace(mVcdFile, fullOut_preg, "fullOut_preg");
    sc_trace(mVcdFile, tmp_4_fu_275_p1, "tmp_4_fu_275_p1");
    sc_trace(mVcdFile, tmp_5_fu_279_p2, "tmp_5_fu_279_p2");
    sc_trace(mVcdFile, result_fu_285_p2, "result_fu_285_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_70, "ap_sig_bdd_70");
#endif

    }
    mHdltvinHandle.open("runQueue.hdltvin.dat");
    mHdltvoutHandle.open("runQueue.hdltvout.dat");
}

runQueue::~runQueue() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void runQueue::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        cmdOut_V_preg = ap_const_lv2_0;
    } else {
        if (esl_seteq<1,4,4>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) {
            cmdOut_V_preg = ap_const_lv2_2;
        } else if (esl_seteq<1,4,4>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
            cmdOut_V_preg = ap_const_lv2_1;
        } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) || 
                    (esl_seteq<1,4,4>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(tmp_reg_338.read(), ap_const_lv1_0)) || 
                    (esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(tmp_fu_251_p2.read(), ap_const_lv1_0)) || 
                    (esl_seteq<1,4,4>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(tmp_reg_338.read(), ap_const_lv1_0) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, tmp6_fu_309_p2.read())) || 
                    esl_seteq<1,4,4>(ap_ST_st5_fsm_4, ap_CS_fsm.read()))) {
            cmdOut_V_preg = ap_const_lv2_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        currentIteration_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,4,4>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
             !esl_seteq<1,1,1>(tmp_reg_338.read(), ap_const_lv1_0) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, tmp6_fu_309_p2.read()))) {
            currentIteration_preg = j_1_reg2mem_reg_157.read();
        } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                    !esl_seteq<1,1,1>(tmp_fu_251_p2.read(), ap_const_lv1_0))) {
            currentIteration_preg = ap_const_lv32_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        fullOut_preg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,4,4>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
            fullOut_preg =  (sc_logic) (grp_read_fu_114_p2.read()[0]);
        }
    }
    if (esl_seteq<1,1,1>(grp_load_fu_244_p1.read(), ap_const_lv1_0)) {
        if (esl_seteq<1,4,4>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) {
            i_1_reg2mem_reg_205 = ap_const_lv32_1;
        } else if (ap_sig_bdd_70.read()) {
            i_1_reg2mem_reg_205 = i_s_fu_300_p2.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_lv1_0, grp_load_fu_236_p1.read())) {
        if (esl_seteq<1,4,4>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
            i_reg2mem_reg_181 = ap_const_lv32_1;
        } else if (esl_seteq<1,4,4>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
            i_reg2mem_reg_181 = i_fu_266_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        iterations_ap_vld_preg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,4,4>(ap_ST_st9_fsm_8, ap_CS_fsm.read())) {
            iterations_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, iterations_ap_vld.read()) && 
                    !(esl_seteq<1,4,4>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())))) {
            iterations_ap_vld_preg = iterations_ap_vld.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        iterations_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, iterations_ap_vld.read()) && 
             !(esl_seteq<1,4,4>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())))) {
            iterations_preg = iterations.read();
        }
    }
    if ((esl_seteq<1,4,4>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(tmp_reg_338.read(), ap_const_lv1_0) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp6_fu_309_p2.read()))) {
        j_1_reg2mem_reg_157 = j_s_fu_314_p2.read();
    } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(tmp_fu_251_p2.read(), ap_const_lv1_0))) {
        j_1_reg2mem_reg_157 = ap_const_lv32_1;
    }
    if (esl_seteq<1,1,1>(grp_load_fu_244_p1.read(), ap_const_lv1_0)) {
        if (esl_seteq<1,4,4>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) {
            op2_assign_reg2mem_reg_194 = ap_const_lv32_0;
        } else if (ap_sig_bdd_70.read()) {
            op2_assign_reg2mem_reg_194 = i_1_reg2mem_reg_205.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        priorityOut_V_preg = ap_const_lv4_0;
    } else {
        if (esl_seteq<1,4,4>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
            priorityOut_V_preg = tmp_1_fu_261_p1.read();
        }
    }
    if (((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(localEmpty_load_reg_361.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(grp_load_fu_244_p1.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(localEmpty_load_reg_361.read(), ap_const_lv1_0) && 
          !esl_seteq<1,1,1>(grp_load_fu_244_p1.read(), ap_const_lv1_0)))) {
        result_reg2mem_0_fu_88 = result_1_s_fu_291_p3.read();
    } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(tmp_fu_251_p2.read(), ap_const_lv1_0))) {
        result_reg2mem_0_fu_88 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,4,4>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(tmp_reg_338.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp6_fu_309_p2.read()))) {
        result_reg2mem_1_reg_218 = result_reg2mem_0_load_reg_373.read();
    } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(tmp_fu_251_p2.read(), ap_const_lv1_0))) {
        result_reg2mem_1_reg_218 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_lv1_0, grp_load_fu_236_p1.read())) {
        if (esl_seteq<1,4,4>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
            val_assign_reg2mem_reg_170 = ap_const_lv32_0;
        } else if (esl_seteq<1,4,4>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
            val_assign_reg2mem_reg_170 = i_reg2mem_reg_181.read();
        }
    }
    if (((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
  esl_seteq<1,1,1>(localEmpty_load_reg_361.read(), ap_const_lv1_0)) || esl_seteq<1,4,4>(ap_ST_st5_fsm_4, ap_CS_fsm.read()))) {
        localEmpty_fu_84 = grp_read_fu_136_p2.read();
    }
    if (esl_seteq<1,4,4>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) {
        localEmpty_load_reg_361 = localEmpty_fu_84.read();
    }
    if ((esl_seteq<1,4,4>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) || (esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
  !esl_seteq<1,1,1>(tmp_fu_251_p2.read(), ap_const_lv1_0)) || (esl_seteq<1,4,4>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
  !esl_seteq<1,1,1>(tmp_reg_338.read(), ap_const_lv1_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp6_fu_309_p2.read())))) {
        localFull_fu_80 = grp_read_fu_114_p2.read();
    }
    if ((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && (!esl_seteq<1,1,1>(localEmpty_load_reg_361.read(), ap_const_lv1_0) || 
  !esl_seteq<1,1,1>(grp_load_fu_244_p1.read(), ap_const_lv1_0)))) {
        result_reg2mem_0_load_reg_373 = result_reg2mem_0_fu_88.read();
    }
    if (esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        tmp_reg_338 = tmp_fu_251_p2.read();
    }
}

void runQueue::thread_ap_done() {
    if (esl_seteq<1,4,4>(ap_ST_st9_fsm_8, ap_CS_fsm.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void runQueue::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,4,4>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void runQueue::thread_ap_ready() {
    if (esl_seteq<1,4,4>(ap_ST_st9_fsm_8, ap_CS_fsm.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void runQueue::thread_ap_return() {
    ap_return = result_reg2mem_1_reg_218.read();
}

void runQueue::thread_ap_sig_bdd_52() {
    ap_sig_bdd_52 = (esl_seteq<1,1,1>(iterations_ap_vld_in_sig.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void runQueue::thread_ap_sig_bdd_70() {
    ap_sig_bdd_70 = (esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && esl_seteq<1,1,1>(localEmpty_load_reg_361.read(), ap_const_lv1_0));
}

void runQueue::thread_cmdOut_V() {
    if (esl_seteq<1,4,4>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) {
        cmdOut_V = ap_const_lv2_2;
    } else if (esl_seteq<1,4,4>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        cmdOut_V = ap_const_lv2_1;
    } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) || 
                (esl_seteq<1,4,4>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
                 !esl_seteq<1,1,1>(tmp_reg_338.read(), ap_const_lv1_0)) || 
                (esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                 !esl_seteq<1,1,1>(tmp_fu_251_p2.read(), ap_const_lv1_0)) || 
                (esl_seteq<1,4,4>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
                 !esl_seteq<1,1,1>(tmp_reg_338.read(), ap_const_lv1_0) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, tmp6_fu_309_p2.read())) || 
                esl_seteq<1,4,4>(ap_ST_st5_fsm_4, ap_CS_fsm.read()))) {
        cmdOut_V = ap_const_lv2_0;
    } else {
        cmdOut_V = cmdOut_V_preg.read();
    }
}

void runQueue::thread_currentIteration() {
    if ((esl_seteq<1,4,4>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(tmp_reg_338.read(), ap_const_lv1_0) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp6_fu_309_p2.read()))) {
        currentIteration = j_1_reg2mem_reg_157.read();
    } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(tmp_fu_251_p2.read(), ap_const_lv1_0))) {
        currentIteration = ap_const_lv32_0;
    } else {
        currentIteration = currentIteration_preg.read();
    }
}

void runQueue::thread_finished() {
    finished =  (sc_logic) (ap_const_lv1_1[0]);
}

void runQueue::thread_finished_ap_vld() {
    if (esl_seteq<1,4,4>(ap_ST_st9_fsm_8, ap_CS_fsm.read())) {
        finished_ap_vld = ap_const_logic_1;
    } else {
        finished_ap_vld = ap_const_logic_0;
    }
}

void runQueue::thread_fullOut() {
    if (esl_seteq<1,4,4>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        fullOut = full.read();
    } else {
        fullOut = fullOut_preg.read();
    }
}

void runQueue::thread_grp_load_fu_236_p1() {
    grp_load_fu_236_p1 = localFull_fu_80.read();
}

void runQueue::thread_grp_load_fu_244_p1() {
    grp_load_fu_244_p1 = localEmpty_fu_84.read();
}

void runQueue::thread_grp_read_fu_114_p2() {
    grp_read_fu_114_p2 =  (sc_lv<1>) (full.read());
}

void runQueue::thread_grp_read_fu_136_p2() {
    grp_read_fu_136_p2 =  (sc_lv<1>) (empty.read());
}

void runQueue::thread_i_fu_266_p2() {
    i_fu_266_p2 = (!i_reg2mem_reg_181.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(i_reg2mem_reg_181.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void runQueue::thread_i_s_fu_300_p2() {
    i_s_fu_300_p2 = (!i_1_reg2mem_reg_205.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(i_1_reg2mem_reg_205.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void runQueue::thread_iterations_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, iterations_ap_vld.read())) {
        iterations_ap_vld_in_sig = iterations_ap_vld.read();
    } else {
        iterations_ap_vld_in_sig = iterations_ap_vld_preg.read();
    }
}

void runQueue::thread_iterations_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, iterations_ap_vld.read())) {
        iterations_in_sig = iterations.read();
    } else {
        iterations_in_sig = iterations_preg.read();
    }
}

void runQueue::thread_j_s_fu_314_p2() {
    j_s_fu_314_p2 = (!j_1_reg2mem_reg_157.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(j_1_reg2mem_reg_157.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void runQueue::thread_priorityOut_V() {
    if (esl_seteq<1,4,4>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        priorityOut_V = tmp_1_fu_261_p1.read();
    } else {
        priorityOut_V = priorityOut_V_preg.read();
    }
}

void runQueue::thread_result_1_s_fu_291_p3() {
    result_1_s_fu_291_p3 = (!tmp_5_fu_279_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_5_fu_279_p2.read()[0].to_bool())? result_reg2mem_0_fu_88.read(): result_fu_285_p2.read());
}

void runQueue::thread_result_fu_285_p2() {
    result_fu_285_p2 = (!result_reg2mem_0_fu_88.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(result_reg2mem_0_fu_88.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void runQueue::thread_tmp6_fu_309_p2() {
    tmp6_fu_309_p2 = (!j_1_reg2mem_reg_157.read().is_01() || !iterations_in_sig.read().is_01())? sc_lv<1>(): (sc_bigint<32>(j_1_reg2mem_reg_157.read()) < sc_bigint<32>(iterations_in_sig.read()));
}

void runQueue::thread_tmp_1_fu_261_p1() {
    tmp_1_fu_261_p1 = val_assign_reg2mem_reg_170.read().range(4-1, 0);
}

void runQueue::thread_tmp_4_fu_275_p1() {
    tmp_4_fu_275_p1 = esl_zext<32,4>(priorityIn_V.read());
}

void runQueue::thread_tmp_5_fu_279_p2() {
    tmp_5_fu_279_p2 = (!tmp_4_fu_275_p1.read().is_01() || !op2_assign_reg2mem_reg_194.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_fu_275_p1.read() == op2_assign_reg2mem_reg_194.read());
}

void runQueue::thread_tmp_fu_251_p2() {
    tmp_fu_251_p2 = (!iterations_in_sig.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): (sc_bigint<32>(iterations_in_sig.read()) > sc_bigint<32>(ap_const_lv32_0));
}

void runQueue::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!ap_sig_bdd_52.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (!esl_seteq<1,1,1>(tmp_fu_251_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, grp_load_fu_236_p1.read())) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 3 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, grp_load_fu_236_p1.read())) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 6 : 
            if ((!esl_seteq<1,1,1>(localEmpty_load_reg_361.read(), ap_const_lv1_0) || !esl_seteq<1,1,1>(grp_load_fu_244_p1.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            }
            break;
        case 7 : 
            if ((!esl_seteq<1,1,1>(tmp_reg_338.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp6_fu_309_p2.read()))) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}
void runQueue::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"priorityOut_V\" :  \"" << priorityOut_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"priorityIn_V\" :  \"" << priorityIn_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"cmdOut_V\" :  \"" << cmdOut_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"empty\" :  \"" << empty.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"full\" :  \"" << full.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"fullOut\" :  \"" << fullOut.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"iterations\" :  \"" << iterations.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"iterations_ap_vld\" :  \"" << iterations_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"finished\" :  \"" << finished.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"finished_ap_vld\" :  \"" << finished_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"currentIteration\" :  \"" << currentIteration.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

