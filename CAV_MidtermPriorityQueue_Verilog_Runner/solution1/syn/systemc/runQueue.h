// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _runQueue_HH_
#define _runQueue_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "runQueue_random_priorities.h"

namespace ap_rtl {

struct runQueue : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > priorityOut_V;
    sc_in< sc_lv<4> > priorityIn_V;
    sc_out< sc_lv<2> > cmdOut_V;
    sc_in< sc_logic > empty;
    sc_in< sc_logic > full;
    sc_out< sc_lv<1> > ap_return;


    // Module declarations
    runQueue(sc_module_name name);
    SC_HAS_PROCESS(runQueue);

    ~runQueue();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    runQueue_random_priorities* random_priorities_U;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_lv<8> > random_priorities_address0;
    sc_signal< sc_logic > random_priorities_ce0;
    sc_signal< sc_lv<9> > random_priorities_q0;
    sc_signal< sc_lv<32> > last_1_fu_215_p1;
    sc_signal< sc_lv<32> > last_1_reg_311;
    sc_signal< sc_lv<32> > i_fu_224_p2;
    sc_signal< sc_lv<32> > i_reg_321;
    sc_signal< sc_lv<32> > i_1_fu_235_p2;
    sc_signal< sc_lv<32> > i_1_reg_329;
    sc_signal< sc_lv<1> > result_1_s_fu_246_p2;
    sc_signal< sc_lv<1> > result_1_s_reg_334;
    sc_signal< sc_lv<1> > grp_load_fu_202_p1;
    sc_signal< sc_lv<32> > i_3_fu_252_p2;
    sc_signal< sc_lv<32> > i_3_reg_342;
    sc_signal< sc_lv<1> > grp_load_fu_199_p1;
    sc_signal< sc_lv<1> > p_result_3_fu_282_p2;
    sc_signal< sc_lv<1> > p_result_3_reg_355;
    sc_signal< sc_lv<1> > j_phi_fu_122_p4;
    sc_signal< sc_lv<1> > j_reg_117;
    sc_signal< sc_lv<1> > result_reg_130;
    sc_signal< sc_lv<32> > val_assign_reg_142;
    sc_signal< sc_lv<32> > op2_assign_reg_153;
    sc_signal< sc_lv<1> > result_1_reg_164;
    sc_signal< sc_lv<32> > i_2_reg_175;
    sc_signal< sc_lv<1> > result_3_reg_186;
    sc_signal< sc_lv<64> > tmp_5_fu_258_p1;
    sc_signal< sc_lv<32> > last_fu_58;
    sc_signal< sc_lv<1> > empty_assign_fu_62;
    sc_signal< sc_lv<1> > empty_read_read_fu_76_p2;
    sc_signal< sc_lv<1> > full_assign_fu_66;
    sc_signal< sc_lv<1> > full_read_read_fu_70_p2;
    sc_signal< sc_lv<2> > cmdOut_V_preg;
    sc_signal< sc_lv<4> > tmp_fu_230_p1;
    sc_signal< sc_lv<4> > priorityOut_V_preg;
    sc_signal< sc_lv<4> > tmp_1_fu_263_p1;
    sc_signal< sc_lv<1> > tmp_3_fu_241_p2;
    sc_signal< sc_lv<1> > ult_fu_271_p2;
    sc_signal< sc_lv<1> > rev4_fu_276_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_st1_fsm_0;
    static const sc_lv<4> ap_ST_st2_fsm_1;
    static const sc_lv<4> ap_ST_st3_fsm_2;
    static const sc_lv<4> ap_ST_st4_fsm_3;
    static const sc_lv<4> ap_ST_st5_fsm_4;
    static const sc_lv<4> ap_ST_st6_fsm_5;
    static const sc_lv<4> ap_ST_st7_fsm_6;
    static const sc_lv<4> ap_ST_st8_fsm_7;
    static const sc_lv<4> ap_ST_st9_fsm_8;
    static const sc_lv<4> ap_ST_st10_fsm_9;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_cmdOut_V();
    void thread_empty_read_read_fu_76_p2();
    void thread_full_read_read_fu_70_p2();
    void thread_grp_load_fu_199_p1();
    void thread_grp_load_fu_202_p1();
    void thread_i_1_fu_235_p2();
    void thread_i_3_fu_252_p2();
    void thread_i_fu_224_p2();
    void thread_j_phi_fu_122_p4();
    void thread_last_1_fu_215_p1();
    void thread_p_result_3_fu_282_p2();
    void thread_priorityOut_V();
    void thread_random_priorities_address0();
    void thread_random_priorities_ce0();
    void thread_result_1_s_fu_246_p2();
    void thread_rev4_fu_276_p2();
    void thread_tmp_1_fu_263_p1();
    void thread_tmp_3_fu_241_p2();
    void thread_tmp_5_fu_258_p1();
    void thread_tmp_fu_230_p1();
    void thread_ult_fu_271_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
