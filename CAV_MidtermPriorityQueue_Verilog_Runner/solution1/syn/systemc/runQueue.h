// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _runQueue_HH_
#define _runQueue_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct runQueue : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > priorityOut_V;
    sc_in< sc_lv<8> > priorityIn_V;
    sc_out< sc_lv<2> > cmdOut_V;
    sc_in< sc_logic > empty;
    sc_in< sc_logic > full;
    sc_out< sc_logic > fullOut;
    sc_in< sc_lv<32> > iterations;
    sc_in< sc_logic > iterations_ap_vld;
    sc_out< sc_logic > finished;
    sc_out< sc_logic > finished_ap_vld;
    sc_out< sc_lv<32> > currentIteration;
    sc_out< sc_lv<32> > total;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    runQueue(sc_module_name name);
    SC_HAS_PROCESS(runQueue);

    ~runQueue();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_lv<32> > iterations_in_sig;
    sc_signal< sc_lv<32> > iterations_preg;
    sc_signal< sc_logic > iterations_ap_vld_in_sig;
    sc_signal< sc_logic > iterations_ap_vld_preg;
    sc_signal< bool > ap_sig_bdd_51;
    sc_signal< sc_lv<32> > j_1_fu_234_p2;
    sc_signal< sc_lv<32> > j_1_reg_337;
    sc_signal< sc_lv<32> > i_fu_243_p2;
    sc_signal< sc_lv<32> > i_reg_345;
    sc_signal< sc_lv<32> > i_1_fu_268_p2;
    sc_signal< sc_lv<32> > j_reg_167;
    sc_signal< sc_lv<1> > localEmpty_load_load_fu_265_p1;
    sc_signal< sc_lv<32> > val_assign_reg_179;
    sc_signal< sc_lv<32> > op2_assign_reg_190;
    sc_signal< sc_lv<32> > result_fu_80;
    sc_signal< sc_lv<32> > result_1_s_fu_290_p3;
    sc_signal< sc_lv<1> > tmp_fu_229_p2;
    sc_signal< sc_lv<32> > count_fu_84;
    sc_signal< sc_lv<32> > count_1_fu_254_p2;
    sc_signal< sc_lv<1> > localFull_fu_88;
    sc_signal< sc_lv<1> > grp_read_fu_117_p2;
    sc_signal< sc_lv<1> > localFull_load_load_fu_240_p1;
    sc_signal< sc_lv<1> > localEmpty_fu_92;
    sc_signal< sc_lv<1> > grp_read_fu_154_p2;
    sc_signal< sc_lv<2> > cmdOut_V_preg;
    sc_signal< sc_lv<32> > currentIteration_preg;
    sc_signal< sc_lv<32> > total_preg;
    sc_signal< sc_lv<8> > tmp_2_fu_249_p1;
    sc_signal< sc_lv<8> > priorityOut_V_preg;
    sc_signal< sc_logic > fullOut_preg;
    sc_signal< sc_lv<32> > tmp_4_fu_274_p1;
    sc_signal< sc_lv<1> > tmp_5_fu_278_p2;
    sc_signal< sc_lv<32> > result_1_fu_284_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_st2_fsm_1;
    static const sc_lv<3> ap_ST_st3_fsm_2;
    static const sc_lv<3> ap_ST_st4_fsm_3;
    static const sc_lv<3> ap_ST_st5_fsm_4;
    static const sc_lv<3> ap_ST_st6_fsm_5;
    static const sc_lv<3> ap_ST_st7_fsm_6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_sig_bdd_51();
    void thread_cmdOut_V();
    void thread_count_1_fu_254_p2();
    void thread_currentIteration();
    void thread_finished();
    void thread_finished_ap_vld();
    void thread_fullOut();
    void thread_grp_read_fu_117_p2();
    void thread_grp_read_fu_154_p2();
    void thread_i_1_fu_268_p2();
    void thread_i_fu_243_p2();
    void thread_iterations_ap_vld_in_sig();
    void thread_iterations_in_sig();
    void thread_j_1_fu_234_p2();
    void thread_localEmpty_load_load_fu_265_p1();
    void thread_localFull_load_load_fu_240_p1();
    void thread_priorityOut_V();
    void thread_result_1_fu_284_p2();
    void thread_result_1_s_fu_290_p3();
    void thread_tmp_2_fu_249_p1();
    void thread_tmp_4_fu_274_p1();
    void thread_tmp_5_fu_278_p2();
    void thread_tmp_fu_229_p2();
    void thread_total();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
