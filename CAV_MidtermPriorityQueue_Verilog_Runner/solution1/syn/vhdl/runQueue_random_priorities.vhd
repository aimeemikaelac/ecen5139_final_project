-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity runQueue_random_priorities_rom is 
    generic(
             dwidth     : integer := 9; 
             awidth     : integer := 8; 
             mem_size    : integer := 200
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of runQueue_random_priorities_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "101000101", 1 => "110110101", 2 => "100100110", 3 => "011000101", 
    4 => "100100111", 5 => "010110010", 6 => "101000101", 7 => "111110100", 
    8 => "011001111", 9 => "110000000", 10 => "000010000", 11 => "000010101", 
    12 => "001011111", 13 => "111101011", 14 => "101101000", 15 => "000010110", 
    16 => "000001010", 17 => "100000111", 18 => "100110111", 19 => "110011010", 
    20 => "101111101", 21 => "101001101", 22 => "001000001", 23 => "010111111", 
    24 => "010001001", 25 => "010111000", 26 => "101100010", 27 => "001011110", 
    28 => "100101110", 29 => "001101010", 30 => "100111100", 31 => "110100101", 
    32 => "010100110", 33 => "111011011", 34 => "101101100", 35 => "011111010", 
    36 => "001011011", 37 => "100010001", 38 => "111110100", 39 => "101111111", 
    40 => "101001001", 41 => "110110111", 42 => "111011011", 43 => "011101010", 
    44 => "110110111", 45 => "111101011", 46 => "011101011", 47 => "011110000", 
    48 => "100110110", 49 => "101101010", 50 => "011001011", 51 => "000110101", 
    52 => "001001110", 53 => "110011111", 54 => "101001111", 55 => "011010110", 
    56 => "001100100", 57 => "110110011", 58 => "100101000", 59 => "001000101", 
    60 => "110111111", 61 => "001111101", 62 => "001111100", 63 => "101110110", 
    64 => "001000001", 65 => "011010101", 66 => "100101000", 67 => "101010011", 
    68 => "011010011", 69 => "101110110", 70 => "111011110", 71 => "110010010", 
    72 => "001010101", 73 => "101100001", 74 => "001000010", 75 => "011001000", 
    76 => "111001111", 77 => "010110101", 78 => "100001101", 79 => "100001111", 
    80 => "110011100", 81 => "000111010", 82 => "101011000", 83 => "111011010", 
    84 => "001011010", 85 => "001101001", 86 => "000010100", 87 => "010011100", 
    88 => "110010110", 89 => "100110101", 90 => "111101011", 91 => "110011111", 
    92 => "100001110", 93 => "001011100", 94 => "110101100", 95 => "000010000", 
    96 => "011100011", 97 => "110111001", 98 => "000110001", 99 => "101111001", 
    100 => "110100010", 101 => "110101000", 102 => "110100001", 103 => "001000010", 
    104 => "011110001", 105 => "101001001", 106 => "010011101", 107 => "010011010", 
    108 => "011100010", 109 => "110110111", 110 => "011110110", 111 => "000011100", 
    112 => "000100100", 113 => "110100111", 114 => "110011011", 115 => "000001100", 
    116 => "010101101", 117 => "011100010", 118 => "010101100", 119 => "010010110", 
    120 => "100101010", 121 => "110010110", 122 => "001010000", 123 => "101000101", 
    124 => "101100110", 125 => "110111110", 126 => "110000010", 127 => "001001011", 
    128 => "100011100", 129 => "110100001", 130 => "010001111", 131 => "000011000", 
    132 => "010101000", 133 => "100101001", 134 => "000000011", 135 => "001110100", 
    136 => "000100101", 137 => "010111010", 138 => "101100111", 139 => "011011110", 
    140 => "000101001", 141 => "001111000", 142 => "101110111", 143 => "100010111", 
    144 => "101101110", 145 => "101100010", 146 => "110010011", 147 => "000111110", 
    148 => "110101101", 149 => "110010101", 150 => "010000101", 151 => "100101111", 
    152 => "110000100", 153 => "011000001", 154 => "000010000", 155 => "100011011", 
    156 => "110101011", 157 => "011101001", 158 => "010101111", 159 => "111000111", 
    160 => "010000001", 161 => "010011110", 162 => "100110101", 163 => "000111011", 
    164 => "101101110", 165 => "001101100", 166 => "110010111", 167 => "110000011", 
    168 => "011011000", 169 => "101111101", 170 => "001110110", 171 => "101010110", 
    172 => "000001100", 173 => "000111101", 174 => "110011011", 175 => "001101110", 
    176 => "111001001", 177 => "001011000", 178 => "011000111", 179 => "110100011", 
    180 => "111011010", 181 => "001110100", 182 => "010010001", 183 => "000001000", 
    184 => "010010000", 185 => "000100000", 186 => "001101010", 187 => "111000011", 
    188 => "011111101", 189 => "001110011", 190 => "011001010", 191 => "111101110", 
    192 => "011101111", 193 => "010111100", 194 => "101011111", 195 => "010011011", 
    196 => "000011100", 197 => "011100011", 198 => "100001000", 199 => "010111000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity runQueue_random_priorities is
    generic (
        DataWidth : INTEGER := 9;
        AddressRange : INTEGER := 200;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of runQueue_random_priorities is
    component runQueue_random_priorities_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;




begin
    runQueue_random_priorities_rom_U :  component runQueue_random_priorities_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


