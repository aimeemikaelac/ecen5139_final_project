-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity min_heapify is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_priority_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_priority_ce0 : OUT STD_LOGIC;
    a_priority_we0 : OUT STD_LOGIC;
    a_priority_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_priority_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_priority_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_priority_ce1 : OUT STD_LOGIC;
    a_priority_we1 : OUT STD_LOGIC;
    a_priority_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_priority_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_data_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_data_ce0 : OUT STD_LOGIC;
    a_data_we0 : OUT STD_LOGIC;
    a_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of min_heapify is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal temp_priority_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_data_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_175_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_205_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_reg_403_temp: signed (32-1 downto 0);
    signal tmp_5_reg_413 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_priority_load_2_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_in_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_139 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_temp: signed (32-1 downto 0);
    signal tmp_2_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_fu_175_p3_temp: signed (32-1 downto 0);
    signal tmp_3_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_159_p2_temp: signed (32-1 downto 0);
    signal tmp_10_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_265_p3_temp: signed (32-1 downto 0);
    signal tmp_8_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_327_p3_temp: signed (32-1 downto 0);
    signal tmp_11_fu_155_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_j_fu_199_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_232_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_14_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_252_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_fu_220_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_265_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg1_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr1_fu_293_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_fu_303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f1_fu_313_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_17_fu_279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t1_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_327_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- j_0_in_reg_130 assign process. --
    j_0_in_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
                j_0_in_reg_130 <= j_1_reg_403;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                j_0_in_reg_130 <= i;
            end if; 
        end if;
    end process;

    -- j_3_reg_139 assign process. --
    j_3_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_6_fu_215_p2)))) then 
                j_3_reg_139 <= j_1_reg_403;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((tmp_s_fu_165_p2 = ap_const_lv1_0)))) then 
                j_3_reg_139 <= j_fu_159_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then
                a_priority_load_2_reg_423 <= a_priority_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                j_1_reg_403 <= j_1_fu_205_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_s_fu_165_p2 = ap_const_lv1_0))) then
                j_2_reg_388(1) <= j_2_fu_175_p3(1);
    j_2_reg_388(2) <= j_2_fu_175_p3(2);
    j_2_reg_388(3) <= j_2_fu_175_p3(3);
    j_2_reg_388(4) <= j_2_fu_175_p3(4);
    j_2_reg_388(5) <= j_2_fu_175_p3(5);
    j_2_reg_388(6) <= j_2_fu_175_p3(6);
    j_2_reg_388(7) <= j_2_fu_175_p3(7);
    j_2_reg_388(8) <= j_2_fu_175_p3(8);
    j_2_reg_388(9) <= j_2_fu_175_p3(9);
    j_2_reg_388(10) <= j_2_fu_175_p3(10);
    j_2_reg_388(11) <= j_2_fu_175_p3(11);
    j_2_reg_388(12) <= j_2_fu_175_p3(12);
    j_2_reg_388(13) <= j_2_fu_175_p3(13);
    j_2_reg_388(14) <= j_2_fu_175_p3(14);
    j_2_reg_388(15) <= j_2_fu_175_p3(15);
    j_2_reg_388(16) <= j_2_fu_175_p3(16);
    j_2_reg_388(17) <= j_2_fu_175_p3(17);
    j_2_reg_388(18) <= j_2_fu_175_p3(18);
    j_2_reg_388(19) <= j_2_fu_175_p3(19);
    j_2_reg_388(20) <= j_2_fu_175_p3(20);
    j_2_reg_388(21) <= j_2_fu_175_p3(21);
    j_2_reg_388(22) <= j_2_fu_175_p3(22);
    j_2_reg_388(23) <= j_2_fu_175_p3(23);
    j_2_reg_388(24) <= j_2_fu_175_p3(24);
    j_2_reg_388(25) <= j_2_fu_175_p3(25);
    j_2_reg_388(26) <= j_2_fu_175_p3(26);
    j_2_reg_388(27) <= j_2_fu_175_p3(27);
    j_2_reg_388(28) <= j_2_fu_175_p3(28);
    j_2_reg_388(29) <= j_2_fu_175_p3(29);
    j_2_reg_388(30) <= j_2_fu_175_p3(30);
    j_2_reg_388(31) <= j_2_fu_175_p3(31);
                tmp_1_reg_383 <= tmp_1_fu_170_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                j_reg_373(1) <= j_fu_159_p2(1);
    j_reg_373(2) <= j_fu_159_p2(2);
    j_reg_373(3) <= j_fu_159_p2(3);
    j_reg_373(4) <= j_fu_159_p2(4);
    j_reg_373(5) <= j_fu_159_p2(5);
    j_reg_373(6) <= j_fu_159_p2(6);
    j_reg_373(7) <= j_fu_159_p2(7);
    j_reg_373(8) <= j_fu_159_p2(8);
    j_reg_373(9) <= j_fu_159_p2(9);
    j_reg_373(10) <= j_fu_159_p2(10);
    j_reg_373(11) <= j_fu_159_p2(11);
    j_reg_373(12) <= j_fu_159_p2(12);
    j_reg_373(13) <= j_fu_159_p2(13);
    j_reg_373(14) <= j_fu_159_p2(14);
    j_reg_373(15) <= j_fu_159_p2(15);
    j_reg_373(16) <= j_fu_159_p2(16);
    j_reg_373(17) <= j_fu_159_p2(17);
    j_reg_373(18) <= j_fu_159_p2(18);
    j_reg_373(19) <= j_fu_159_p2(19);
    j_reg_373(20) <= j_fu_159_p2(20);
    j_reg_373(21) <= j_fu_159_p2(21);
    j_reg_373(22) <= j_fu_159_p2(22);
    j_reg_373(23) <= j_fu_159_p2(23);
    j_reg_373(24) <= j_fu_159_p2(24);
    j_reg_373(25) <= j_fu_159_p2(25);
    j_reg_373(26) <= j_fu_159_p2(26);
    j_reg_373(27) <= j_fu_159_p2(27);
    j_reg_373(28) <= j_fu_159_p2(28);
    j_reg_373(29) <= j_fu_159_p2(29);
    j_reg_373(30) <= j_fu_159_p2(30);
    j_reg_373(31) <= j_fu_159_p2(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                temp_data_reg_368 <= a_data_q0;
                temp_priority_reg_362 <= a_priority_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then
                tmp_5_reg_413 <= tmp_5_fu_211_p1;
            end if;
        end if;
    end process;
    j_reg_373(0) <= '0';
    j_2_reg_388(0) <= '1';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , tmp_s_fu_165_p2 , tmp_6_fu_215_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((tmp_s_fu_165_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = tmp_6_fu_215_p2))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- a_data_address0 assign process. --
    a_data_address0_assign_proc : process(ap_CS_fsm, tmp_5_reg_413, tmp_fu_149_p1, tmp_10_fu_273_p1, tmp_8_fu_335_p1)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            a_data_address0 <= tmp_8_fu_335_p1(8 - 1 downto 0);
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            a_data_address0 <= tmp_10_fu_273_p1(8 - 1 downto 0);
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            a_data_address0 <= tmp_5_reg_413(8 - 1 downto 0);
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            a_data_address0 <= tmp_fu_149_p1(8 - 1 downto 0);
        else 
            a_data_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- a_data_ce0 assign process. --
    a_data_ce0_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st6_fsm_5 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm) or (ap_ST_st8_fsm_7 = ap_CS_fsm))) then 
            a_data_ce0 <= ap_const_logic_1;
        else 
            a_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- a_data_d0 assign process. --
    a_data_d0_assign_proc : process(ap_CS_fsm, a_data_q0, temp_data_reg_368)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            a_data_d0 <= temp_data_reg_368;
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            a_data_d0 <= a_data_q0;
        else 
            a_data_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- a_data_we0 assign process. --
    a_data_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st7_fsm_6 = ap_CS_fsm) or (ap_ST_st8_fsm_7 = ap_CS_fsm))) then 
            a_data_we0 <= ap_const_logic_1;
        else 
            a_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- a_priority_address0 assign process. --
    a_priority_address0_assign_proc : process(ap_CS_fsm, tmp_fu_149_p1, tmp_2_fu_183_p1, tmp_10_fu_273_p1)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            a_priority_address0 <= tmp_10_fu_273_p1(8 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            a_priority_address0 <= tmp_2_fu_183_p1(8 - 1 downto 0);
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            a_priority_address0 <= tmp_fu_149_p1(8 - 1 downto 0);
        else 
            a_priority_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- a_priority_address1 assign process. --
    a_priority_address1_assign_proc : process(ap_CS_fsm, tmp_5_fu_211_p1, tmp_3_fu_188_p1, tmp_8_fu_335_p1)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            a_priority_address1 <= tmp_8_fu_335_p1(8 - 1 downto 0);
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            a_priority_address1 <= tmp_5_fu_211_p1(8 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            a_priority_address1 <= tmp_3_fu_188_p1(8 - 1 downto 0);
        else 
            a_priority_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- a_priority_ce0 assign process. --
    a_priority_ce0_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            a_priority_ce0 <= ap_const_logic_1;
        else 
            a_priority_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- a_priority_ce1 assign process. --
    a_priority_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st5_fsm_4 = ap_CS_fsm) or (ap_ST_st8_fsm_7 = ap_CS_fsm))) then 
            a_priority_ce1 <= ap_const_logic_1;
        else 
            a_priority_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_priority_d0 <= a_priority_load_2_reg_423;
    a_priority_d1 <= temp_priority_reg_362;

    -- a_priority_we0 assign process. --
    a_priority_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            a_priority_we0 <= ap_const_logic_1;
        else 
            a_priority_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- a_priority_we1 assign process. --
    a_priority_we1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm))) then 
            a_priority_we1 <= ap_const_logic_1;
        else 
            a_priority_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st8_fsm_7 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_205_p3 <= 
        p_j_fu_199_p3 when (tmp_1_reg_383(0) = '1') else 
        j_reg_373;
    j_2_fu_175_p3 <= (tmp_11_fu_155_p1 & ap_const_lv1_1);
    j_fu_159_p2 <= std_logic_vector(shift_left(unsigned(j_0_in_reg_130),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    p_j_fu_199_p3 <= 
        j_2_reg_388 when (tmp_4_fu_193_p2(0) = '1') else 
        j_reg_373;
    p_lshr1_fu_293_p4 <= p_neg1_fu_287_p2(31 downto 1);
    p_lshr_f1_fu_313_p4 <= j_3_reg_139(31 downto 1);
    p_lshr_f_fu_252_p4 <= j_1_reg_403(31 downto 1);
    p_lshr_fu_232_p4 <= p_neg_fu_227_p2(31 downto 1);
    p_neg1_fu_287_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(j_3_reg_139));
    p_neg_fu_227_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(j_1_reg_403));
    p_neg_t1_fu_307_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_12_fu_303_p1));
    p_neg_t_fu_246_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_14_fu_242_p1));
    
    tmp_9_fu_265_p3_temp <= signed(tmp_9_fu_265_p3);
    tmp_10_fu_273_p1 <= std_logic_vector(resize(tmp_9_fu_265_p3_temp,64));

    tmp_11_fu_155_p1 <= j_0_in_reg_130(31 - 1 downto 0);
    tmp_12_fu_303_p1 <= std_logic_vector(resize(unsigned(p_lshr1_fu_293_p4),32));
    tmp_13_fu_323_p1 <= std_logic_vector(resize(unsigned(p_lshr_f1_fu_313_p4),32));
    tmp_14_fu_242_p1 <= std_logic_vector(resize(unsigned(p_lshr_fu_232_p4),32));
    tmp_15_fu_261_p1 <= std_logic_vector(resize(unsigned(p_lshr_f_fu_252_p4),32));
    tmp_17_fu_279_p3 <= j_3_reg_139(31 downto 31);
    tmp_18_fu_220_p3 <= j_1_reg_403(31 downto 31);
    tmp_1_fu_170_p2 <= "1" when (signed(j_fu_159_p2) < signed(n)) else "0";
    
    j_2_fu_175_p3_temp <= signed(j_2_fu_175_p3);
    tmp_2_fu_183_p1 <= std_logic_vector(resize(j_2_fu_175_p3_temp,64));

    
    j_fu_159_p2_temp <= signed(j_fu_159_p2);
    tmp_3_fu_188_p1 <= std_logic_vector(resize(j_fu_159_p2_temp,64));

    tmp_4_fu_193_p2 <= "1" when (signed(a_priority_q0) < signed(a_priority_q1)) else "0";
    
    j_1_reg_403_temp <= signed(j_1_reg_403);
    tmp_5_fu_211_p1 <= std_logic_vector(resize(j_1_reg_403_temp,64));

    tmp_6_fu_215_p2 <= "1" when (signed(temp_priority_reg_362) < signed(a_priority_q1)) else "0";
    tmp_7_fu_327_p3 <= 
        p_neg_t1_fu_307_p2 when (tmp_17_fu_279_p3(0) = '1') else 
        tmp_13_fu_323_p1;
    
    tmp_7_fu_327_p3_temp <= signed(tmp_7_fu_327_p3);
    tmp_8_fu_335_p1 <= std_logic_vector(resize(tmp_7_fu_327_p3_temp,64));

    tmp_9_fu_265_p3 <= 
        p_neg_t_fu_246_p2 when (tmp_18_fu_220_p3(0) = '1') else 
        tmp_15_fu_261_p1;
    
    i_temp <= signed(i);
    tmp_fu_149_p1 <= std_logic_vector(resize(i_temp,64));

    tmp_s_fu_165_p2 <= "1" when (signed(j_fu_159_p2) > signed(n)) else "0";
end behav;
