-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity queue is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    isPush : IN STD_LOGIC;
    inData_priority : IN STD_LOGIC_VECTOR (8 downto 0);
    inData_data : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of queue is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal size : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal queueDataHeap_priority_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal queueDataHeap_priority_ce0 : STD_LOGIC;
    signal queueDataHeap_priority_we0 : STD_LOGIC;
    signal queueDataHeap_priority_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal queueDataHeap_priority_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal queueDataHeap_priority_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal queueDataHeap_priority_ce1 : STD_LOGIC;
    signal queueDataHeap_priority_we1 : STD_LOGIC;
    signal queueDataHeap_priority_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal queueDataHeap_priority_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal queueDataHeap_data_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal queueDataHeap_data_ce0 : STD_LOGIC;
    signal queueDataHeap_data_we0 : STD_LOGIC;
    signal queueDataHeap_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal queueDataHeap_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal queueDataHeap_data_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal queueDataHeap_data_ce1 : STD_LOGIC;
    signal queueDataHeap_data_we1 : STD_LOGIC;
    signal queueDataHeap_data_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal queueDataHeap_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal inData_data_cast_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal inData_data_cast_reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal inData_priority_cast_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal inData_priority_cast_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal size_load_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal isPush_read_read_fu_58_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_assign_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queueDataHeap_priority_load_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal queueDataHeap_data_load_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_1_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_1_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_9_fu_333_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_11_cast_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_11_cast_reg_473 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i1_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_cast_fu_382_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_10_cast_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_min_heapify_fu_169_ap_start : STD_LOGIC;
    signal grp_min_heapify_fu_169_ap_done : STD_LOGIC;
    signal grp_min_heapify_fu_169_ap_idle : STD_LOGIC;
    signal grp_min_heapify_fu_169_ap_ready : STD_LOGIC;
    signal grp_min_heapify_fu_169_a_priority_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_min_heapify_fu_169_a_priority_ce0 : STD_LOGIC;
    signal grp_min_heapify_fu_169_a_priority_we0 : STD_LOGIC;
    signal grp_min_heapify_fu_169_a_priority_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_min_heapify_fu_169_a_priority_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_min_heapify_fu_169_a_priority_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_min_heapify_fu_169_a_priority_ce1 : STD_LOGIC;
    signal grp_min_heapify_fu_169_a_priority_we1 : STD_LOGIC;
    signal grp_min_heapify_fu_169_a_priority_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_min_heapify_fu_169_a_priority_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_min_heapify_fu_169_a_data_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_min_heapify_fu_169_a_data_ce0 : STD_LOGIC;
    signal grp_min_heapify_fu_169_a_data_we0 : STD_LOGIC;
    signal grp_min_heapify_fu_169_a_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_min_heapify_fu_169_a_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_min_heapify_fu_169_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_min_heapify_fu_169_n : STD_LOGIC_VECTOR (31 downto 0);
    signal i9_i_i1_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal i9_i_i_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_priority_2_reg_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_data_2_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_min_heapify_fu_169_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_i1_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal size_temp: signed (32-1 downto 0);
    signal tmp_i_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_assign_fu_213_p2_temp: signed (32-1 downto 0);
    signal p_neg_i_i_cast_fu_233_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr_i_i_fu_243_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr_i_i_cast_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_i_i_fu_259_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_19_fu_225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_i_i_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_i_i7_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_i_i8_fu_299_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_17_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_i_i1_fu_319_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_20_fu_286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_i_i9_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_347_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_11_fu_351_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_21_fu_372_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_10_fu_376_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component min_heapify IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_priority_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_priority_ce0 : OUT STD_LOGIC;
        a_priority_we0 : OUT STD_LOGIC;
        a_priority_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_priority_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_priority_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_priority_ce1 : OUT STD_LOGIC;
        a_priority_we1 : OUT STD_LOGIC;
        a_priority_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_priority_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_data_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_data_ce0 : OUT STD_LOGIC;
        a_data_we0 : OUT STD_LOGIC;
        a_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i : IN STD_LOGIC_VECTOR (31 downto 0);
        n : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component queue_queueDataHeap_priority IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    queueDataHeap_priority_U : component queue_queueDataHeap_priority
    generic map (
        DataWidth => 32,
        AddressRange => 201,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => queueDataHeap_priority_address0,
        ce0 => queueDataHeap_priority_ce0,
        we0 => queueDataHeap_priority_we0,
        d0 => queueDataHeap_priority_d0,
        q0 => queueDataHeap_priority_q0,
        address1 => queueDataHeap_priority_address1,
        ce1 => queueDataHeap_priority_ce1,
        we1 => queueDataHeap_priority_we1,
        d1 => queueDataHeap_priority_d1,
        q1 => queueDataHeap_priority_q1);

    queueDataHeap_data_U : component queue_queueDataHeap_priority
    generic map (
        DataWidth => 32,
        AddressRange => 201,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => queueDataHeap_data_address0,
        ce0 => queueDataHeap_data_ce0,
        we0 => queueDataHeap_data_we0,
        d0 => queueDataHeap_data_d0,
        q0 => queueDataHeap_data_q0,
        address1 => queueDataHeap_data_address1,
        ce1 => queueDataHeap_data_ce1,
        we1 => queueDataHeap_data_we1,
        d1 => queueDataHeap_data_d1,
        q1 => queueDataHeap_data_q1);

    grp_min_heapify_fu_169 : component min_heapify
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_min_heapify_fu_169_ap_start,
        ap_done => grp_min_heapify_fu_169_ap_done,
        ap_idle => grp_min_heapify_fu_169_ap_idle,
        ap_ready => grp_min_heapify_fu_169_ap_ready,
        a_priority_address0 => grp_min_heapify_fu_169_a_priority_address0,
        a_priority_ce0 => grp_min_heapify_fu_169_a_priority_ce0,
        a_priority_we0 => grp_min_heapify_fu_169_a_priority_we0,
        a_priority_d0 => grp_min_heapify_fu_169_a_priority_d0,
        a_priority_q0 => grp_min_heapify_fu_169_a_priority_q0,
        a_priority_address1 => grp_min_heapify_fu_169_a_priority_address1,
        a_priority_ce1 => grp_min_heapify_fu_169_a_priority_ce1,
        a_priority_we1 => grp_min_heapify_fu_169_a_priority_we1,
        a_priority_d1 => grp_min_heapify_fu_169_a_priority_d1,
        a_priority_q1 => grp_min_heapify_fu_169_a_priority_q1,
        a_data_address0 => grp_min_heapify_fu_169_a_data_address0,
        a_data_ce0 => grp_min_heapify_fu_169_a_data_ce0,
        a_data_we0 => grp_min_heapify_fu_169_a_data_we0,
        a_data_d0 => grp_min_heapify_fu_169_a_data_d0,
        a_data_q0 => grp_min_heapify_fu_169_a_data_q0,
        i => grp_min_heapify_fu_169_i,
        n => grp_min_heapify_fu_169_n);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_0_preg assign process. --
    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
                    ap_return_0_preg <= outData_priority_2_reg_136;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_1_preg assign process. --
    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
                    ap_return_1_preg <= outData_data_2_reg_152;
                end if; 
            end if;
        end if;
    end process;


    -- grp_min_heapify_fu_169_ap_start_ap_start_reg assign process. --
    grp_min_heapify_fu_169_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_min_heapify_fu_169_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_i_i1_fu_341_p2))) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_i_i_fu_366_p2))))) then 
                    grp_min_heapify_fu_169_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_min_heapify_fu_169_ap_ready)) then 
                    grp_min_heapify_fu_169_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i9_i_i1_reg_116 assign process. --
    i9_i_i1_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_logic_0 = grp_min_heapify_fu_169_ap_done)))) then 
                i9_i_i1_reg_116 <= i_11_cast_reg_473;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                i9_i_i1_reg_116 <= i_9_fu_333_p3;
            end if; 
        end if;
    end process;

    -- i9_i_i_reg_126 assign process. --
    i9_i_i_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_logic_0 = grp_min_heapify_fu_169_ap_done)) and (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
                i9_i_i_reg_126 <= i_10_cast_reg_481;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_207_p2))) then 
                i9_i_i_reg_126 <= i_fu_273_p3;
            end if; 
        end if;
    end process;

    -- outData_data_2_reg_152 assign process. --
    outData_data_2_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_207_p2))) or ((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (isPush_read_read_fu_58_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_s_fu_195_p2))))) then 
                outData_data_2_reg_152 <= ap_const_lv32_FFFFFFFF;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_i_i1_fu_341_p2))) then 
                outData_data_2_reg_152 <= queueDataHeap_data_load_reg_454;
            elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_i_i_fu_366_p2))) then 
                outData_data_2_reg_152 <= inData_data_cast_reg_406;
            end if; 
        end if;
    end process;

    -- outData_priority_2_reg_136 assign process. --
    outData_priority_2_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_207_p2))) or ((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (isPush_read_read_fu_58_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_s_fu_195_p2))))) then 
                outData_priority_2_reg_136 <= ap_const_lv32_7FFFFFFF;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_i_i1_fu_341_p2))) then 
                outData_priority_2_reg_136 <= queueDataHeap_priority_load_reg_449;
            elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_i_i_fu_366_p2))) then 
                outData_priority_2_reg_136 <= inData_priority_cast_reg_411;
            end if; 
        end if;
    end process;

    -- size assign process. --
    size_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_i_i_fu_366_p2))) then 
                size <= n_assign_reg_438;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_i_i1_fu_341_p2))) then 
                size <= n_assign_1_reg_459;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_i_i_fu_366_p2)))) then
                i_10_cast_reg_481(0) <= i_10_cast_fu_382_p1(0);
    i_10_cast_reg_481(1) <= i_10_cast_fu_382_p1(1);
    i_10_cast_reg_481(2) <= i_10_cast_fu_382_p1(2);
    i_10_cast_reg_481(3) <= i_10_cast_fu_382_p1(3);
    i_10_cast_reg_481(4) <= i_10_cast_fu_382_p1(4);
    i_10_cast_reg_481(5) <= i_10_cast_fu_382_p1(5);
    i_10_cast_reg_481(6) <= i_10_cast_fu_382_p1(6);
    i_10_cast_reg_481(7) <= i_10_cast_fu_382_p1(7);
    i_10_cast_reg_481(8) <= i_10_cast_fu_382_p1(8);
    i_10_cast_reg_481(9) <= i_10_cast_fu_382_p1(9);
    i_10_cast_reg_481(10) <= i_10_cast_fu_382_p1(10);
    i_10_cast_reg_481(11) <= i_10_cast_fu_382_p1(11);
    i_10_cast_reg_481(12) <= i_10_cast_fu_382_p1(12);
    i_10_cast_reg_481(13) <= i_10_cast_fu_382_p1(13);
    i_10_cast_reg_481(14) <= i_10_cast_fu_382_p1(14);
    i_10_cast_reg_481(15) <= i_10_cast_fu_382_p1(15);
    i_10_cast_reg_481(16) <= i_10_cast_fu_382_p1(16);
    i_10_cast_reg_481(17) <= i_10_cast_fu_382_p1(17);
    i_10_cast_reg_481(18) <= i_10_cast_fu_382_p1(18);
    i_10_cast_reg_481(19) <= i_10_cast_fu_382_p1(19);
    i_10_cast_reg_481(20) <= i_10_cast_fu_382_p1(20);
    i_10_cast_reg_481(21) <= i_10_cast_fu_382_p1(21);
    i_10_cast_reg_481(22) <= i_10_cast_fu_382_p1(22);
    i_10_cast_reg_481(23) <= i_10_cast_fu_382_p1(23);
    i_10_cast_reg_481(24) <= i_10_cast_fu_382_p1(24);
    i_10_cast_reg_481(25) <= i_10_cast_fu_382_p1(25);
    i_10_cast_reg_481(26) <= i_10_cast_fu_382_p1(26);
    i_10_cast_reg_481(27) <= i_10_cast_fu_382_p1(27);
    i_10_cast_reg_481(28) <= i_10_cast_fu_382_p1(28);
    i_10_cast_reg_481(29) <= i_10_cast_fu_382_p1(29);
    i_10_cast_reg_481(30) <= i_10_cast_fu_382_p1(30);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_i_i1_fu_341_p2)))) then
                i_11_cast_reg_473(0) <= i_11_cast_fu_357_p1(0);
    i_11_cast_reg_473(1) <= i_11_cast_fu_357_p1(1);
    i_11_cast_reg_473(2) <= i_11_cast_fu_357_p1(2);
    i_11_cast_reg_473(3) <= i_11_cast_fu_357_p1(3);
    i_11_cast_reg_473(4) <= i_11_cast_fu_357_p1(4);
    i_11_cast_reg_473(5) <= i_11_cast_fu_357_p1(5);
    i_11_cast_reg_473(6) <= i_11_cast_fu_357_p1(6);
    i_11_cast_reg_473(7) <= i_11_cast_fu_357_p1(7);
    i_11_cast_reg_473(8) <= i_11_cast_fu_357_p1(8);
    i_11_cast_reg_473(9) <= i_11_cast_fu_357_p1(9);
    i_11_cast_reg_473(10) <= i_11_cast_fu_357_p1(10);
    i_11_cast_reg_473(11) <= i_11_cast_fu_357_p1(11);
    i_11_cast_reg_473(12) <= i_11_cast_fu_357_p1(12);
    i_11_cast_reg_473(13) <= i_11_cast_fu_357_p1(13);
    i_11_cast_reg_473(14) <= i_11_cast_fu_357_p1(14);
    i_11_cast_reg_473(15) <= i_11_cast_fu_357_p1(15);
    i_11_cast_reg_473(16) <= i_11_cast_fu_357_p1(16);
    i_11_cast_reg_473(17) <= i_11_cast_fu_357_p1(17);
    i_11_cast_reg_473(18) <= i_11_cast_fu_357_p1(18);
    i_11_cast_reg_473(19) <= i_11_cast_fu_357_p1(19);
    i_11_cast_reg_473(20) <= i_11_cast_fu_357_p1(20);
    i_11_cast_reg_473(21) <= i_11_cast_fu_357_p1(21);
    i_11_cast_reg_473(22) <= i_11_cast_fu_357_p1(22);
    i_11_cast_reg_473(23) <= i_11_cast_fu_357_p1(23);
    i_11_cast_reg_473(24) <= i_11_cast_fu_357_p1(24);
    i_11_cast_reg_473(25) <= i_11_cast_fu_357_p1(25);
    i_11_cast_reg_473(26) <= i_11_cast_fu_357_p1(26);
    i_11_cast_reg_473(27) <= i_11_cast_fu_357_p1(27);
    i_11_cast_reg_473(28) <= i_11_cast_fu_357_p1(28);
    i_11_cast_reg_473(29) <= i_11_cast_fu_357_p1(29);
    i_11_cast_reg_473(30) <= i_11_cast_fu_357_p1(30);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                inData_data_cast_reg_406(0) <= inData_data_cast_fu_181_p1(0);
    inData_data_cast_reg_406(1) <= inData_data_cast_fu_181_p1(1);
    inData_data_cast_reg_406(2) <= inData_data_cast_fu_181_p1(2);
    inData_data_cast_reg_406(3) <= inData_data_cast_fu_181_p1(3);
    inData_data_cast_reg_406(4) <= inData_data_cast_fu_181_p1(4);
    inData_data_cast_reg_406(5) <= inData_data_cast_fu_181_p1(5);
    inData_data_cast_reg_406(6) <= inData_data_cast_fu_181_p1(6);
    inData_data_cast_reg_406(7) <= inData_data_cast_fu_181_p1(7);
                inData_priority_cast_reg_411(0) <= inData_priority_cast_fu_186_p1(0);
    inData_priority_cast_reg_411(1) <= inData_priority_cast_fu_186_p1(1);
    inData_priority_cast_reg_411(2) <= inData_priority_cast_fu_186_p1(2);
    inData_priority_cast_reg_411(3) <= inData_priority_cast_fu_186_p1(3);
    inData_priority_cast_reg_411(4) <= inData_priority_cast_fu_186_p1(4);
    inData_priority_cast_reg_411(5) <= inData_priority_cast_fu_186_p1(5);
    inData_priority_cast_reg_411(6) <= inData_priority_cast_fu_186_p1(6);
    inData_priority_cast_reg_411(7) <= inData_priority_cast_fu_186_p1(7);
    inData_priority_cast_reg_411(8) <= inData_priority_cast_fu_186_p1(8);
                size_load_reg_416 <= size;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                n_assign_1_reg_459 <= n_assign_1_fu_281_p2;
                queueDataHeap_data_load_reg_454 <= queueDataHeap_data_q0;
                queueDataHeap_priority_load_reg_449 <= queueDataHeap_priority_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_207_p2))) then
                n_assign_reg_438 <= n_assign_fu_213_p2;
            end if;
        end if;
    end process;
    inData_data_cast_reg_406(31 downto 8) <= "000000000000000000000000";
    inData_priority_cast_reg_411(31 downto 9) <= "00000000000000000000000";
    i_11_cast_reg_473(31) <= '0';
    i_10_cast_reg_481(31) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , isPush_read_read_fu_58_p2 , tmp_s_fu_195_p2 , tmp_fu_207_p2 , tmp_i_i1_fu_341_p2 , tmp_i_i_fu_366_p2 , grp_min_heapify_fu_169_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_207_p2))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif ((not((ap_start = ap_const_logic_0)) and ((not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_207_p2))) or ((isPush_read_read_fu_58_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_s_fu_195_p2)))))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                elsif ((not((ap_start = ap_const_logic_0)) and (isPush_read_read_fu_58_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_s_fu_195_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = tmp_i_i1_fu_341_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = grp_min_heapify_fu_169_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = tmp_i_i_fu_366_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_logic_0 = grp_min_heapify_fu_169_ap_done))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return_0 assign process. --
    ap_return_0_assign_proc : process(ap_CS_fsm, outData_priority_2_reg_136, ap_return_0_preg)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            ap_return_0 <= outData_priority_2_reg_136;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    -- ap_return_1 assign process. --
    ap_return_1_assign_proc : process(ap_CS_fsm, outData_data_2_reg_152, ap_return_1_preg)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            ap_return_1 <= outData_data_2_reg_152;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    grp_min_heapify_fu_169_a_data_q0 <= queueDataHeap_data_q0;
    grp_min_heapify_fu_169_a_priority_q0 <= queueDataHeap_priority_q0;
    grp_min_heapify_fu_169_a_priority_q1 <= queueDataHeap_priority_q1;
    grp_min_heapify_fu_169_ap_start <= grp_min_heapify_fu_169_ap_start_ap_start_reg;

    -- grp_min_heapify_fu_169_i assign process. --
    grp_min_heapify_fu_169_i_assign_proc : process(ap_CS_fsm, i9_i_i1_reg_116, i9_i_i_reg_126)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            grp_min_heapify_fu_169_i <= i9_i_i_reg_126;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            grp_min_heapify_fu_169_i <= i9_i_i1_reg_116;
        else 
            grp_min_heapify_fu_169_i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_min_heapify_fu_169_n assign process. --
    grp_min_heapify_fu_169_n_assign_proc : process(ap_CS_fsm, n_assign_reg_438, n_assign_1_reg_459)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            grp_min_heapify_fu_169_n <= n_assign_reg_438;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            grp_min_heapify_fu_169_n <= n_assign_1_reg_459;
        else 
            grp_min_heapify_fu_169_n <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_10_cast_fu_382_p1 <= std_logic_vector(resize(unsigned(i_10_fu_376_p2),32));
    i_10_fu_376_p2 <= std_logic_vector(unsigned(tmp_21_fu_372_p1) + unsigned(ap_const_lv31_7FFFFFFF));
    i_11_cast_fu_357_p1 <= std_logic_vector(resize(unsigned(i_11_fu_351_p2),32));
    i_11_fu_351_p2 <= std_logic_vector(unsigned(tmp_22_fu_347_p1) + unsigned(ap_const_lv31_7FFFFFFF));
    i_9_fu_333_p3 <= 
        p_neg_t_i_i9_fu_313_p2 when (tmp_20_fu_286_p3(0) = '1') else 
        tmp_18_fu_329_p1;
    i_fu_273_p3 <= 
        p_neg_t_i_i_fu_253_p2 when (tmp_19_fu_225_p3(0) = '1') else 
        tmp_16_fu_269_p1;
    inData_data_cast_fu_181_p1 <= std_logic_vector(resize(unsigned(inData_data),32));
    inData_priority_cast_fu_186_p1 <= std_logic_vector(resize(unsigned(inData_priority),32));
    isPush_read_read_fu_58_p2 <= (0=>isPush, others=>'-');
    n_assign_1_fu_281_p2 <= std_logic_vector(unsigned(size_load_reg_416) + unsigned(ap_const_lv32_FFFFFFFF));
    n_assign_fu_213_p2 <= std_logic_vector(unsigned(size) + unsigned(ap_const_lv32_1));
    p_lshr_f_i_i1_fu_319_p4 <= n_assign_1_fu_281_p2(31 downto 1);
    p_lshr_f_i_i_fu_259_p4 <= n_assign_fu_213_p2(31 downto 1);
    p_lshr_i_i8_fu_299_p4 <= p_neg_i_i7_fu_294_p2(31 downto 1);
    p_lshr_i_i_cast_fu_249_p1 <= std_logic_vector(resize(unsigned(p_lshr_i_i_fu_243_p2),32));
    p_lshr_i_i_fu_243_p2 <= (p_neg_i_i_cast_fu_233_p4 xor ap_const_lv31_7FFFFFFF);
    p_neg_i_i7_fu_294_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) - unsigned(size_load_reg_416));
    p_neg_i_i_cast_fu_233_p4 <= size(31 downto 1);
    p_neg_t_i_i9_fu_313_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_17_fu_309_p1));
    p_neg_t_i_i_fu_253_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_lshr_i_i_cast_fu_249_p1));

    -- queueDataHeap_data_address0 assign process. --
    queueDataHeap_data_address0_assign_proc : process(ap_CS_fsm, isPush_read_read_fu_58_p2, tmp_s_fu_195_p2, tmp_fu_207_p2, grp_min_heapify_fu_169_a_data_address0, tmp_i_fu_219_p1)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_207_p2))) then 
            queueDataHeap_data_address0 <= tmp_i_fu_219_p1(8 - 1 downto 0);
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and (isPush_read_read_fu_58_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_s_fu_195_p2))) then 
            queueDataHeap_data_address0 <= ap_const_lv8_1;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            queueDataHeap_data_address0 <= grp_min_heapify_fu_169_a_data_address0;
        else 
            queueDataHeap_data_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- queueDataHeap_data_address1 assign process. --
    queueDataHeap_data_address1_assign_proc : process(ap_CS_fsm, tmp_i1_fu_201_p1)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            queueDataHeap_data_address1 <= ap_const_lv8_1;
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            queueDataHeap_data_address1 <= tmp_i1_fu_201_p1(8 - 1 downto 0);
        else 
            queueDataHeap_data_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- queueDataHeap_data_ce0 assign process. --
    queueDataHeap_data_ce0_assign_proc : process(ap_start, ap_CS_fsm, isPush_read_read_fu_58_p2, tmp_s_fu_195_p2, tmp_fu_207_p2, grp_min_heapify_fu_169_a_data_ce0)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (isPush_read_read_fu_58_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_s_fu_195_p2)) or ((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_207_p2)))) then 
            queueDataHeap_data_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            queueDataHeap_data_ce0 <= grp_min_heapify_fu_169_a_data_ce0;
        else 
            queueDataHeap_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- queueDataHeap_data_ce1 assign process. --
    queueDataHeap_data_ce1_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            queueDataHeap_data_ce1 <= ap_const_logic_1;
        else 
            queueDataHeap_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- queueDataHeap_data_d0 assign process. --
    queueDataHeap_data_d0_assign_proc : process(ap_CS_fsm, inData_data_cast_fu_181_p1, isPush_read_read_fu_58_p2, tmp_fu_207_p2, grp_min_heapify_fu_169_a_data_d0)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_207_p2))) then 
            queueDataHeap_data_d0 <= inData_data_cast_fu_181_p1;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            queueDataHeap_data_d0 <= grp_min_heapify_fu_169_a_data_d0;
        else 
            queueDataHeap_data_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    queueDataHeap_data_d1 <= queueDataHeap_data_q1;

    -- queueDataHeap_data_we0 assign process. --
    queueDataHeap_data_we0_assign_proc : process(ap_start, ap_CS_fsm, isPush_read_read_fu_58_p2, tmp_fu_207_p2, grp_min_heapify_fu_169_a_data_we0)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_207_p2)))) then 
            queueDataHeap_data_we0 <= ap_const_logic_1;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            queueDataHeap_data_we0 <= grp_min_heapify_fu_169_a_data_we0;
        else 
            queueDataHeap_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- queueDataHeap_data_we1 assign process. --
    queueDataHeap_data_we1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            queueDataHeap_data_we1 <= ap_const_logic_1;
        else 
            queueDataHeap_data_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- queueDataHeap_priority_address0 assign process. --
    queueDataHeap_priority_address0_assign_proc : process(ap_CS_fsm, isPush_read_read_fu_58_p2, tmp_s_fu_195_p2, tmp_fu_207_p2, grp_min_heapify_fu_169_a_priority_address0, tmp_i_fu_219_p1)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_207_p2))) then 
            queueDataHeap_priority_address0 <= tmp_i_fu_219_p1(8 - 1 downto 0);
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and (isPush_read_read_fu_58_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_s_fu_195_p2))) then 
            queueDataHeap_priority_address0 <= ap_const_lv8_1;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            queueDataHeap_priority_address0 <= grp_min_heapify_fu_169_a_priority_address0;
        else 
            queueDataHeap_priority_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- queueDataHeap_priority_address1 assign process. --
    queueDataHeap_priority_address1_assign_proc : process(ap_CS_fsm, grp_min_heapify_fu_169_a_priority_address1, tmp_i1_fu_201_p1)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            queueDataHeap_priority_address1 <= ap_const_lv8_1;
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            queueDataHeap_priority_address1 <= tmp_i1_fu_201_p1(8 - 1 downto 0);
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            queueDataHeap_priority_address1 <= grp_min_heapify_fu_169_a_priority_address1;
        else 
            queueDataHeap_priority_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- queueDataHeap_priority_ce0 assign process. --
    queueDataHeap_priority_ce0_assign_proc : process(ap_start, ap_CS_fsm, isPush_read_read_fu_58_p2, tmp_s_fu_195_p2, tmp_fu_207_p2, grp_min_heapify_fu_169_a_priority_ce0)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (isPush_read_read_fu_58_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_s_fu_195_p2)) or ((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_207_p2)))) then 
            queueDataHeap_priority_ce0 <= ap_const_logic_1;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            queueDataHeap_priority_ce0 <= grp_min_heapify_fu_169_a_priority_ce0;
        else 
            queueDataHeap_priority_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- queueDataHeap_priority_ce1 assign process. --
    queueDataHeap_priority_ce1_assign_proc : process(ap_start, ap_CS_fsm, grp_min_heapify_fu_169_a_priority_ce1)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            queueDataHeap_priority_ce1 <= ap_const_logic_1;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            queueDataHeap_priority_ce1 <= grp_min_heapify_fu_169_a_priority_ce1;
        else 
            queueDataHeap_priority_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- queueDataHeap_priority_d0 assign process. --
    queueDataHeap_priority_d0_assign_proc : process(ap_CS_fsm, inData_priority_cast_fu_186_p1, isPush_read_read_fu_58_p2, tmp_fu_207_p2, grp_min_heapify_fu_169_a_priority_d0)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_207_p2))) then 
            queueDataHeap_priority_d0 <= inData_priority_cast_fu_186_p1;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            queueDataHeap_priority_d0 <= grp_min_heapify_fu_169_a_priority_d0;
        else 
            queueDataHeap_priority_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- queueDataHeap_priority_d1 assign process. --
    queueDataHeap_priority_d1_assign_proc : process(ap_CS_fsm, queueDataHeap_priority_q1, grp_min_heapify_fu_169_a_priority_d1)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            queueDataHeap_priority_d1 <= queueDataHeap_priority_q1;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            queueDataHeap_priority_d1 <= grp_min_heapify_fu_169_a_priority_d1;
        else 
            queueDataHeap_priority_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- queueDataHeap_priority_we0 assign process. --
    queueDataHeap_priority_we0_assign_proc : process(ap_start, ap_CS_fsm, isPush_read_read_fu_58_p2, tmp_fu_207_p2, grp_min_heapify_fu_169_a_priority_we0)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((isPush_read_read_fu_58_p2 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_207_p2)))) then 
            queueDataHeap_priority_we0 <= ap_const_logic_1;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            queueDataHeap_priority_we0 <= grp_min_heapify_fu_169_a_priority_we0;
        else 
            queueDataHeap_priority_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- queueDataHeap_priority_we1 assign process. --
    queueDataHeap_priority_we1_assign_proc : process(ap_CS_fsm, grp_min_heapify_fu_169_a_priority_we1)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            queueDataHeap_priority_we1 <= ap_const_logic_1;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            queueDataHeap_priority_we1 <= grp_min_heapify_fu_169_a_priority_we1;
        else 
            queueDataHeap_priority_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_16_fu_269_p1 <= std_logic_vector(resize(unsigned(p_lshr_f_i_i_fu_259_p4),32));
    tmp_17_fu_309_p1 <= std_logic_vector(resize(unsigned(p_lshr_i_i8_fu_299_p4),32));
    tmp_18_fu_329_p1 <= std_logic_vector(resize(unsigned(p_lshr_f_i_i1_fu_319_p4),32));
    tmp_19_fu_225_p3 <= n_assign_fu_213_p2(31 downto 31);
    tmp_20_fu_286_p3 <= n_assign_1_fu_281_p2(31 downto 31);
    tmp_21_fu_372_p1 <= i9_i_i_reg_126(31 - 1 downto 0);
    tmp_22_fu_347_p1 <= i9_i_i1_reg_116(31 - 1 downto 0);
    tmp_fu_207_p2 <= "1" when (size = ap_const_lv32_C8) else "0";
    
    size_temp <= signed(size);
    tmp_i1_fu_201_p1 <= std_logic_vector(resize(size_temp,64));

    
    n_assign_fu_213_p2_temp <= signed(n_assign_fu_213_p2);
    tmp_i_fu_219_p1 <= std_logic_vector(resize(n_assign_fu_213_p2_temp,64));

    tmp_i_i1_fu_341_p2 <= "1" when (signed(i9_i_i1_reg_116) > signed(ap_const_lv32_0)) else "0";
    tmp_i_i_fu_366_p2 <= "1" when (signed(i9_i_i_reg_126) > signed(ap_const_lv32_0)) else "0";
    tmp_s_fu_195_p2 <= "1" when (size = ap_const_lv32_0) else "0";
end behav;
