// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _min_heapify_HH_
#define _min_heapify_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct min_heapify : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > a_priority_address0;
    sc_out< sc_logic > a_priority_ce0;
    sc_out< sc_logic > a_priority_we0;
    sc_out< sc_lv<32> > a_priority_d0;
    sc_in< sc_lv<32> > a_priority_q0;
    sc_out< sc_lv<8> > a_priority_address1;
    sc_out< sc_logic > a_priority_ce1;
    sc_out< sc_logic > a_priority_we1;
    sc_out< sc_lv<32> > a_priority_d1;
    sc_in< sc_lv<32> > a_priority_q1;
    sc_out< sc_lv<8> > a_data_address0;
    sc_out< sc_logic > a_data_ce0;
    sc_out< sc_logic > a_data_we0;
    sc_out< sc_lv<32> > a_data_d0;
    sc_in< sc_lv<32> > a_data_q0;
    sc_in< sc_lv<32> > i;
    sc_in< sc_lv<32> > n;


    // Module declarations
    min_heapify(sc_module_name name);
    SC_HAS_PROCESS(min_heapify);

    ~min_heapify();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_lv<32> > temp_priority_reg_362;
    sc_signal< sc_lv<32> > temp_data_reg_368;
    sc_signal< sc_lv<32> > j_fu_159_p2;
    sc_signal< sc_lv<32> > j_reg_373;
    sc_signal< sc_lv<1> > tmp_1_fu_170_p2;
    sc_signal< sc_lv<1> > tmp_1_reg_383;
    sc_signal< sc_lv<1> > tmp_s_fu_165_p2;
    sc_signal< sc_lv<32> > j_2_fu_175_p3;
    sc_signal< sc_lv<32> > j_2_reg_388;
    sc_signal< sc_lv<32> > j_1_fu_205_p3;
    sc_signal< sc_lv<32> > j_1_reg_403;
    sc_signal< sc_lv<64> > tmp_5_fu_211_p1;
    sc_signal< sc_lv<64> > tmp_5_reg_413;
    sc_signal< sc_lv<32> > a_priority_load_2_reg_423;
    sc_signal< sc_lv<1> > tmp_6_fu_215_p2;
    sc_signal< sc_lv<32> > j_0_in_reg_130;
    sc_signal< sc_lv<32> > j_3_reg_139;
    sc_signal< sc_lv<64> > tmp_fu_149_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_183_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_188_p1;
    sc_signal< sc_lv<64> > tmp_10_fu_273_p1;
    sc_signal< sc_lv<64> > tmp_8_fu_335_p1;
    sc_signal< sc_lv<31> > tmp_11_fu_155_p1;
    sc_signal< sc_lv<1> > tmp_4_fu_193_p2;
    sc_signal< sc_lv<32> > p_j_fu_199_p3;
    sc_signal< sc_lv<32> > p_neg_fu_227_p2;
    sc_signal< sc_lv<31> > p_lshr_fu_232_p4;
    sc_signal< sc_lv<32> > tmp_14_fu_242_p1;
    sc_signal< sc_lv<31> > p_lshr_f_fu_252_p4;
    sc_signal< sc_lv<1> > tmp_18_fu_220_p3;
    sc_signal< sc_lv<32> > p_neg_t_fu_246_p2;
    sc_signal< sc_lv<32> > tmp_15_fu_261_p1;
    sc_signal< sc_lv<32> > tmp_9_fu_265_p3;
    sc_signal< sc_lv<32> > p_neg1_fu_287_p2;
    sc_signal< sc_lv<31> > p_lshr1_fu_293_p4;
    sc_signal< sc_lv<32> > tmp_12_fu_303_p1;
    sc_signal< sc_lv<31> > p_lshr_f1_fu_313_p4;
    sc_signal< sc_lv<1> > tmp_17_fu_279_p3;
    sc_signal< sc_lv<32> > p_neg_t1_fu_307_p2;
    sc_signal< sc_lv<32> > tmp_13_fu_323_p1;
    sc_signal< sc_lv<32> > tmp_7_fu_327_p3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_st2_fsm_1;
    static const sc_lv<3> ap_ST_st3_fsm_2;
    static const sc_lv<3> ap_ST_st4_fsm_3;
    static const sc_lv<3> ap_ST_st5_fsm_4;
    static const sc_lv<3> ap_ST_st6_fsm_5;
    static const sc_lv<3> ap_ST_st7_fsm_6;
    static const sc_lv<3> ap_ST_st8_fsm_7;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_data_address0();
    void thread_a_data_ce0();
    void thread_a_data_d0();
    void thread_a_data_we0();
    void thread_a_priority_address0();
    void thread_a_priority_address1();
    void thread_a_priority_ce0();
    void thread_a_priority_ce1();
    void thread_a_priority_d0();
    void thread_a_priority_d1();
    void thread_a_priority_we0();
    void thread_a_priority_we1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_j_1_fu_205_p3();
    void thread_j_2_fu_175_p3();
    void thread_j_fu_159_p2();
    void thread_p_j_fu_199_p3();
    void thread_p_lshr1_fu_293_p4();
    void thread_p_lshr_f1_fu_313_p4();
    void thread_p_lshr_f_fu_252_p4();
    void thread_p_lshr_fu_232_p4();
    void thread_p_neg1_fu_287_p2();
    void thread_p_neg_fu_227_p2();
    void thread_p_neg_t1_fu_307_p2();
    void thread_p_neg_t_fu_246_p2();
    void thread_tmp_10_fu_273_p1();
    void thread_tmp_11_fu_155_p1();
    void thread_tmp_12_fu_303_p1();
    void thread_tmp_13_fu_323_p1();
    void thread_tmp_14_fu_242_p1();
    void thread_tmp_15_fu_261_p1();
    void thread_tmp_17_fu_279_p3();
    void thread_tmp_18_fu_220_p3();
    void thread_tmp_1_fu_170_p2();
    void thread_tmp_2_fu_183_p1();
    void thread_tmp_3_fu_188_p1();
    void thread_tmp_4_fu_193_p2();
    void thread_tmp_5_fu_211_p1();
    void thread_tmp_6_fu_215_p2();
    void thread_tmp_7_fu_327_p3();
    void thread_tmp_8_fu_335_p1();
    void thread_tmp_9_fu_265_p3();
    void thread_tmp_fu_149_p1();
    void thread_tmp_s_fu_165_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
