// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module min_heapify (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_priority_address0,
        a_priority_ce0,
        a_priority_we0,
        a_priority_d0,
        a_priority_q0,
        a_priority_address1,
        a_priority_ce1,
        a_priority_we1,
        a_priority_d1,
        a_priority_q1,
        a_data_address0,
        a_data_ce0,
        a_data_we0,
        a_data_d0,
        a_data_q0,
        i,
        n
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_st5_fsm_4 = 3'b100;
parameter    ap_ST_st6_fsm_5 = 3'b101;
parameter    ap_ST_st7_fsm_6 = 3'b110;
parameter    ap_ST_st8_fsm_7 = 3'b111;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] a_priority_address0;
output   a_priority_ce0;
output   a_priority_we0;
output  [31:0] a_priority_d0;
input  [31:0] a_priority_q0;
output  [7:0] a_priority_address1;
output   a_priority_ce1;
output   a_priority_we1;
output  [31:0] a_priority_d1;
input  [31:0] a_priority_q1;
output  [7:0] a_data_address0;
output   a_data_ce0;
output   a_data_we0;
output  [31:0] a_data_d0;
input  [31:0] a_data_q0;
input  [31:0] i;
input  [31:0] n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] a_priority_address0;
reg a_priority_ce0;
reg a_priority_we0;
reg[7:0] a_priority_address1;
reg a_priority_ce1;
reg a_priority_we1;
reg[7:0] a_data_address0;
reg a_data_ce0;
reg a_data_we0;
reg[31:0] a_data_d0;
reg   [2:0] ap_CS_fsm = 3'b000;
reg   [31:0] temp_priority_reg_362;
reg   [31:0] temp_data_reg_368;
wire   [31:0] j_fu_159_p2;
reg   [31:0] j_reg_373;
wire   [0:0] tmp_1_fu_170_p2;
reg   [0:0] tmp_1_reg_383;
wire   [0:0] tmp_s_fu_165_p2;
wire   [31:0] j_2_fu_175_p3;
reg   [31:0] j_2_reg_388;
wire   [31:0] j_1_fu_205_p3;
reg   [31:0] j_1_reg_403;
wire   [63:0] tmp_5_fu_211_p1;
reg   [63:0] tmp_5_reg_413;
reg   [31:0] a_priority_load_2_reg_423;
wire   [0:0] tmp_6_fu_215_p2;
reg   [31:0] j_0_in_reg_130;
reg   [31:0] j_3_reg_139;
wire   [63:0] tmp_fu_149_p1;
wire   [63:0] tmp_2_fu_183_p1;
wire   [63:0] tmp_3_fu_188_p1;
wire   [63:0] tmp_10_fu_273_p1;
wire   [63:0] tmp_8_fu_335_p1;
wire   [30:0] tmp_11_fu_155_p1;
wire   [0:0] tmp_4_fu_193_p2;
wire   [31:0] p_j_fu_199_p3;
wire   [31:0] p_neg_fu_227_p2;
wire   [30:0] p_lshr_fu_232_p4;
wire   [31:0] tmp_14_fu_242_p1;
wire   [30:0] p_lshr_f_fu_252_p4;
wire   [0:0] tmp_18_fu_220_p3;
wire   [31:0] p_neg_t_fu_246_p2;
wire   [31:0] tmp_15_fu_261_p1;
wire   [31:0] tmp_9_fu_265_p3;
wire   [31:0] p_neg1_fu_287_p2;
wire   [30:0] p_lshr1_fu_293_p4;
wire   [31:0] tmp_12_fu_303_p1;
wire   [30:0] p_lshr_f1_fu_313_p4;
wire   [0:0] tmp_17_fu_279_p3;
wire   [31:0] p_neg_t1_fu_307_p2;
wire   [31:0] tmp_13_fu_323_p1;
wire   [31:0] tmp_7_fu_327_p3;
reg   [2:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        j_0_in_reg_130 <= j_1_reg_403;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        j_0_in_reg_130 <= i;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st6_fsm_5 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_6_fu_215_p2))) begin
        j_3_reg_139 <= j_1_reg_403;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(tmp_s_fu_165_p2 == ap_const_lv1_0))) begin
        j_3_reg_139 <= j_fu_159_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        a_priority_load_2_reg_423 <= a_priority_q1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        j_1_reg_403 <= j_1_fu_205_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_s_fu_165_p2 == ap_const_lv1_0))) begin
        j_2_reg_388[1] <= j_2_fu_175_p3[1];
j_2_reg_388[2] <= j_2_fu_175_p3[2];
j_2_reg_388[3] <= j_2_fu_175_p3[3];
j_2_reg_388[4] <= j_2_fu_175_p3[4];
j_2_reg_388[5] <= j_2_fu_175_p3[5];
j_2_reg_388[6] <= j_2_fu_175_p3[6];
j_2_reg_388[7] <= j_2_fu_175_p3[7];
j_2_reg_388[8] <= j_2_fu_175_p3[8];
j_2_reg_388[9] <= j_2_fu_175_p3[9];
j_2_reg_388[10] <= j_2_fu_175_p3[10];
j_2_reg_388[11] <= j_2_fu_175_p3[11];
j_2_reg_388[12] <= j_2_fu_175_p3[12];
j_2_reg_388[13] <= j_2_fu_175_p3[13];
j_2_reg_388[14] <= j_2_fu_175_p3[14];
j_2_reg_388[15] <= j_2_fu_175_p3[15];
j_2_reg_388[16] <= j_2_fu_175_p3[16];
j_2_reg_388[17] <= j_2_fu_175_p3[17];
j_2_reg_388[18] <= j_2_fu_175_p3[18];
j_2_reg_388[19] <= j_2_fu_175_p3[19];
j_2_reg_388[20] <= j_2_fu_175_p3[20];
j_2_reg_388[21] <= j_2_fu_175_p3[21];
j_2_reg_388[22] <= j_2_fu_175_p3[22];
j_2_reg_388[23] <= j_2_fu_175_p3[23];
j_2_reg_388[24] <= j_2_fu_175_p3[24];
j_2_reg_388[25] <= j_2_fu_175_p3[25];
j_2_reg_388[26] <= j_2_fu_175_p3[26];
j_2_reg_388[27] <= j_2_fu_175_p3[27];
j_2_reg_388[28] <= j_2_fu_175_p3[28];
j_2_reg_388[29] <= j_2_fu_175_p3[29];
j_2_reg_388[30] <= j_2_fu_175_p3[30];
j_2_reg_388[31] <= j_2_fu_175_p3[31];
        tmp_1_reg_383 <= tmp_1_fu_170_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        j_reg_373[1] <= j_fu_159_p2[1];
j_reg_373[2] <= j_fu_159_p2[2];
j_reg_373[3] <= j_fu_159_p2[3];
j_reg_373[4] <= j_fu_159_p2[4];
j_reg_373[5] <= j_fu_159_p2[5];
j_reg_373[6] <= j_fu_159_p2[6];
j_reg_373[7] <= j_fu_159_p2[7];
j_reg_373[8] <= j_fu_159_p2[8];
j_reg_373[9] <= j_fu_159_p2[9];
j_reg_373[10] <= j_fu_159_p2[10];
j_reg_373[11] <= j_fu_159_p2[11];
j_reg_373[12] <= j_fu_159_p2[12];
j_reg_373[13] <= j_fu_159_p2[13];
j_reg_373[14] <= j_fu_159_p2[14];
j_reg_373[15] <= j_fu_159_p2[15];
j_reg_373[16] <= j_fu_159_p2[16];
j_reg_373[17] <= j_fu_159_p2[17];
j_reg_373[18] <= j_fu_159_p2[18];
j_reg_373[19] <= j_fu_159_p2[19];
j_reg_373[20] <= j_fu_159_p2[20];
j_reg_373[21] <= j_fu_159_p2[21];
j_reg_373[22] <= j_fu_159_p2[22];
j_reg_373[23] <= j_fu_159_p2[23];
j_reg_373[24] <= j_fu_159_p2[24];
j_reg_373[25] <= j_fu_159_p2[25];
j_reg_373[26] <= j_fu_159_p2[26];
j_reg_373[27] <= j_fu_159_p2[27];
j_reg_373[28] <= j_fu_159_p2[28];
j_reg_373[29] <= j_fu_159_p2[29];
j_reg_373[30] <= j_fu_159_p2[30];
j_reg_373[31] <= j_fu_159_p2[31];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        temp_data_reg_368 <= a_data_q0;
        temp_priority_reg_362 <= a_priority_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        tmp_5_reg_413 <= tmp_5_fu_211_p1;
    end
end

/// a_data_address0 assign process. ///
always @ (ap_CS_fsm or tmp_5_reg_413 or tmp_fu_149_p1 or tmp_10_fu_273_p1 or tmp_8_fu_335_p1)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        a_data_address0 = tmp_8_fu_335_p1;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        a_data_address0 = tmp_10_fu_273_p1;
    end else if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        a_data_address0 = tmp_5_reg_413;
    end else if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
        a_data_address0 = tmp_fu_149_p1;
    end else begin
        a_data_address0 = 'bx;
    end
end

/// a_data_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st6_fsm_5 == ap_CS_fsm) | (ap_ST_st7_fsm_6 == ap_CS_fsm) | (ap_ST_st8_fsm_7 == ap_CS_fsm))) begin
        a_data_ce0 = ap_const_logic_1;
    end else begin
        a_data_ce0 = ap_const_logic_0;
    end
end

/// a_data_d0 assign process. ///
always @ (ap_CS_fsm or a_data_q0 or temp_data_reg_368)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        a_data_d0 = temp_data_reg_368;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        a_data_d0 = a_data_q0;
    end else begin
        a_data_d0 = 'bx;
    end
end

/// a_data_we0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st7_fsm_6 == ap_CS_fsm) | (ap_ST_st8_fsm_7 == ap_CS_fsm))) begin
        a_data_we0 = ap_const_logic_1;
    end else begin
        a_data_we0 = ap_const_logic_0;
    end
end

/// a_priority_address0 assign process. ///
always @ (ap_CS_fsm or tmp_fu_149_p1 or tmp_2_fu_183_p1 or tmp_10_fu_273_p1)
begin
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        a_priority_address0 = tmp_10_fu_273_p1;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        a_priority_address0 = tmp_2_fu_183_p1;
    end else if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
        a_priority_address0 = tmp_fu_149_p1;
    end else begin
        a_priority_address0 = 'bx;
    end
end

/// a_priority_address1 assign process. ///
always @ (ap_CS_fsm or tmp_5_fu_211_p1 or tmp_3_fu_188_p1 or tmp_8_fu_335_p1)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        a_priority_address1 = tmp_8_fu_335_p1;
    end else if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        a_priority_address1 = tmp_5_fu_211_p1;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        a_priority_address1 = tmp_3_fu_188_p1;
    end else begin
        a_priority_address1 = 'bx;
    end
end

/// a_priority_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st3_fsm_2 == ap_CS_fsm) | (ap_ST_st7_fsm_6 == ap_CS_fsm))) begin
        a_priority_ce0 = ap_const_logic_1;
    end else begin
        a_priority_ce0 = ap_const_logic_0;
    end
end

/// a_priority_ce1 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) | (ap_ST_st5_fsm_4 == ap_CS_fsm) | (ap_ST_st8_fsm_7 == ap_CS_fsm))) begin
        a_priority_ce1 = ap_const_logic_1;
    end else begin
        a_priority_ce1 = ap_const_logic_0;
    end
end

/// a_priority_we0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        a_priority_we0 = ap_const_logic_1;
    end else begin
        a_priority_we0 = ap_const_logic_0;
    end
end

/// a_priority_we1 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        a_priority_we1 = ap_const_logic_1;
    end else begin
        a_priority_we1 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | (ap_ST_st8_fsm_7 == ap_CS_fsm))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_s_fu_165_p2 or tmp_6_fu_215_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            if (~(tmp_s_fu_165_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            if (~(ap_const_lv1_0 == tmp_6_fu_215_p2)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        ap_ST_st7_fsm_6 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st8_fsm_7 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign a_priority_d0 = a_priority_load_2_reg_423;
assign a_priority_d1 = temp_priority_reg_362;
assign j_1_fu_205_p3 = ((tmp_1_reg_383)? p_j_fu_199_p3: j_reg_373);
assign j_2_fu_175_p3 = {{tmp_11_fu_155_p1}, {ap_const_lv1_1}};
assign j_fu_159_p2 = j_0_in_reg_130 << ap_const_lv32_1;
assign p_j_fu_199_p3 = ((tmp_4_fu_193_p2)? j_2_reg_388: j_reg_373);
assign p_lshr1_fu_293_p4 = {{p_neg1_fu_287_p2[ap_const_lv32_1F : ap_const_lv32_1]}};
assign p_lshr_f1_fu_313_p4 = {{j_3_reg_139[ap_const_lv32_1F : ap_const_lv32_1]}};
assign p_lshr_f_fu_252_p4 = {{j_1_reg_403[ap_const_lv32_1F : ap_const_lv32_1]}};
assign p_lshr_fu_232_p4 = {{p_neg_fu_227_p2[ap_const_lv32_1F : ap_const_lv32_1]}};
assign p_neg1_fu_287_p2 = (ap_const_lv32_0 - j_3_reg_139);
assign p_neg_fu_227_p2 = (ap_const_lv32_0 - j_1_reg_403);
assign p_neg_t1_fu_307_p2 = (ap_const_lv32_0 - tmp_12_fu_303_p1);
assign p_neg_t_fu_246_p2 = (ap_const_lv32_0 - tmp_14_fu_242_p1);
assign tmp_10_fu_273_p1 = $signed(tmp_9_fu_265_p3);
assign tmp_11_fu_155_p1 = j_0_in_reg_130[30:0];
assign tmp_12_fu_303_p1 = $unsigned(p_lshr1_fu_293_p4);
assign tmp_13_fu_323_p1 = $unsigned(p_lshr_f1_fu_313_p4);
assign tmp_14_fu_242_p1 = $unsigned(p_lshr_fu_232_p4);
assign tmp_15_fu_261_p1 = $unsigned(p_lshr_f_fu_252_p4);
assign tmp_17_fu_279_p3 = j_3_reg_139[ap_const_lv32_1F];
assign tmp_18_fu_220_p3 = j_1_reg_403[ap_const_lv32_1F];
assign tmp_1_fu_170_p2 = ($signed(j_fu_159_p2) < $signed(n)? 1'b1: 1'b0);
assign tmp_2_fu_183_p1 = $signed(j_2_fu_175_p3);
assign tmp_3_fu_188_p1 = $signed(j_fu_159_p2);
assign tmp_4_fu_193_p2 = ($signed(a_priority_q0) < $signed(a_priority_q1)? 1'b1: 1'b0);
assign tmp_5_fu_211_p1 = $signed(j_1_reg_403);
assign tmp_6_fu_215_p2 = ($signed(temp_priority_reg_362) < $signed(a_priority_q1)? 1'b1: 1'b0);
assign tmp_7_fu_327_p3 = ((tmp_17_fu_279_p3)? p_neg_t1_fu_307_p2: tmp_13_fu_323_p1);
assign tmp_8_fu_335_p1 = $signed(tmp_7_fu_327_p3);
assign tmp_9_fu_265_p3 = ((tmp_18_fu_220_p3)? p_neg_t_fu_246_p2: tmp_15_fu_261_p1);
assign tmp_fu_149_p1 = $signed(i);
assign tmp_s_fu_165_p2 = ($signed(j_fu_159_p2) > $signed(n)? 1'b1: 1'b0);
always @ (posedge ap_clk)
begin
    j_reg_373[0] <= 1'b0;
    j_2_reg_388[0] <= 1'b1;
end



endmodule //min_heapify

